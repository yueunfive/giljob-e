{"ast":null,"code":"var _jsxFileName = \"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/\\u1100\\u1175\\u11AFJOB\\u110B\\u1175/src/component/Dropdown.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./Dropdown.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dropdown() {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [select, setSelect] = useState(\"지역\");\n  const [selectedOption, setSelectedOption] = useState(`${select}을 선택해 주세요`);\n  const dropdownRef = useRef(null); // Ref 객체를 생성하여 드롭다운 컨테이너를 참조\n\n  const region = [\"전체\", \"서울\", \"경기\", \"부산\", \"대구\", \"인천\"]; // 드롭다운 박스의 옵션들을 배열로 정의\n\n  // 드롭다운 컨테이너 외부를 클릭하면 드롭다운 내용을 닫을 수 있게 하는 기능\n  useEffect(() => {\n    // 아무데나 클릭했을 때 드롭다운을 닫는 이벤트 리스너를 추가\n    const handleOutsideClick = event => {\n      // dropdownRef를 이용하여 클릭 이벤트가 드롭다운 컨테이너 내부에서 발생한 것인지 확인\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false); // 드롭다운 내용을 닫음\n      }\n    };\n    // document 전역에 클릭 이벤트 리스너를 추가\n    document.addEventListener(\"click\", handleOutsideClick);\n    // 컴포넌트가 unmount될 때 이벤트 리스너를 정리\n    return () => {\n      document.removeEventListener(\"click\", handleOutsideClick);\n    };\n  }, []); // 빈 배열을 전달하여 마운트될 때만 useEffect가 실행되도록 설정\n\n  // 드롭다운 버튼을 클릭했을 때 호출되는 함수\n  const handleDropdownClick = () => {\n    setIsOpen(!isOpen); // isOpen 상태를 토글하여 드롭다운 내용을 보이거나 숨김\n  };\n\n  // 드롭다운 내용의 각 옵션을 클릭했을 때 호출되는 함수\n  const handleOptionClick = option => {\n    console.log(\"Clicked option:\", option);\n    setIsOpen(false); // 드롭다운 내용을 숨김\n    setSelectedOption(option); // 선택된 옵션을 selectedOption 상태로 설정\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.dropdown_container,\n    ref: dropdownRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"className=\", `${styles.drop_btn} ${isOpen ? styles.opened : \"\"}`, \"onClick=\", handleDropdownClick, \">\", selectedOption]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.dropdown_content,\n      children: region.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.option,\n        onClick: () => handleOptionClick(option),\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Dropdown, \"duMNAugq9mBeZmlGS4oRg5KcO5k=\");\n_c = Dropdown;\nexport default Dropdown;\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styles","jsxDEV","_jsxDEV","Dropdown","_s","isOpen","setIsOpen","select","setSelect","selectedOption","setSelectedOption","dropdownRef","region","handleOutsideClick","event","current","contains","target","document","addEventListener","removeEventListener","handleDropdownClick","handleOptionClick","option","console","log","className","dropdown_container","ref","children","drop_btn","opened","fileName","_jsxFileName","lineNumber","columnNumber","dropdown_content","map","onClick","_c","$RefreshReg$"],"sources":["/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/길JOB이/src/component/Dropdown.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./Dropdown.module.css\";\n\nfunction Dropdown() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [select, setSelect] = useState(\"지역\");\n  const [selectedOption, setSelectedOption] = useState(\n    `${select}을 선택해 주세요`\n  );\n  const dropdownRef = useRef(null); // Ref 객체를 생성하여 드롭다운 컨테이너를 참조\n\n  const region = [\"전체\", \"서울\", \"경기\", \"부산\", \"대구\", \"인천\"]; // 드롭다운 박스의 옵션들을 배열로 정의\n\n  // 드롭다운 컨테이너 외부를 클릭하면 드롭다운 내용을 닫을 수 있게 하는 기능\n  useEffect(() => {\n    // 아무데나 클릭했을 때 드롭다운을 닫는 이벤트 리스너를 추가\n    const handleOutsideClick = (event) => {\n      // dropdownRef를 이용하여 클릭 이벤트가 드롭다운 컨테이너 내부에서 발생한 것인지 확인\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false); // 드롭다운 내용을 닫음\n      }\n    };\n    // document 전역에 클릭 이벤트 리스너를 추가\n    document.addEventListener(\"click\", handleOutsideClick);\n    // 컴포넌트가 unmount될 때 이벤트 리스너를 정리\n    return () => {\n      document.removeEventListener(\"click\", handleOutsideClick);\n    };\n  }, []); // 빈 배열을 전달하여 마운트될 때만 useEffect가 실행되도록 설정\n\n  // 드롭다운 버튼을 클릭했을 때 호출되는 함수\n  const handleDropdownClick = () => {\n    setIsOpen(!isOpen); // isOpen 상태를 토글하여 드롭다운 내용을 보이거나 숨김\n  };\n\n  // 드롭다운 내용의 각 옵션을 클릭했을 때 호출되는 함수\n  const handleOptionClick = (option) => {\n    console.log(\"Clicked option:\", option);\n    setIsOpen(false); // 드롭다운 내용을 숨김\n    setSelectedOption(option); // 선택된 옵션을 selectedOption 상태로 설정\n  };\n\n  return (\n    <div className={styles.dropdown_container} ref={dropdownRef}>\n      <div>\n        className={`${styles.drop_btn} ${isOpen ? styles.opened : \"\"}`}\n        onClick={handleDropdownClick}>{selectedOption}\n      </div>\n      {isOpen && (\n        <div className={styles.dropdown_content}>\n          {region.map((option) => (\n            <div\n              key={option}\n              className={styles.option}\n              onClick={() => handleOptionClick(option)}\n            >\n              {option}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Dropdown;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}