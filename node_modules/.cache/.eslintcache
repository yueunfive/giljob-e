[{"/Users/yueun-oh/Desktop/길JOB이/src/index.js":"1","/Users/yueun-oh/Desktop/길JOB이/src/App.js":"2","/Users/yueun-oh/Desktop/길JOB이/src/pages/Welcome.jsx":"3","/Users/yueun-oh/Desktop/길JOB이/src/pages/Onboarding.jsx":"4","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/index.js":"5","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/App.js":"6","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/DetailPage.jsx":"7","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Welcome.jsx":"8","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Home.jsx":"9","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Onboarding.jsx":"10","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/SearchResults.jsx":"11","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ScrollToTop.jsx":"12","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Footer.jsx":"13","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ModalContent.jsx":"14","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/AutoComplete.jsx":"15","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Dropdown.jsx":"16"},{"size":467,"mtime":1691100377546,"results":"17","hashOfConfig":"18"},{"size":454,"mtime":1691161672159,"results":"19","hashOfConfig":"18"},{"size":923,"mtime":1691166103107,"results":"20","hashOfConfig":"18"},{"size":172,"mtime":1691165777646,"results":"21","hashOfConfig":"18"},{"size":419,"mtime":1692017009882,"results":"22","hashOfConfig":"23"},{"size":852,"mtime":1692006945267,"results":"24","hashOfConfig":"23"},{"size":1173,"mtime":1691734696000,"results":"25","hashOfConfig":"23"},{"size":925,"mtime":1691739860000,"results":"26","hashOfConfig":"23"},{"size":6747,"mtime":1692022721991,"results":"27","hashOfConfig":"23"},{"size":5865,"mtime":1691836382764,"results":"28","hashOfConfig":"23"},{"size":3642,"mtime":1691999157022,"results":"29","hashOfConfig":"23"},{"size":306,"mtime":1691722942000,"results":"30","hashOfConfig":"23"},{"size":686,"mtime":1691722942000,"results":"31","hashOfConfig":"23"},{"size":8036,"mtime":1692022269461,"results":"32","hashOfConfig":"23"},{"size":3451,"mtime":1692007741459,"results":"33","hashOfConfig":"23"},{"size":2475,"mtime":1691722942000,"results":"34","hashOfConfig":"23"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"tygnch",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gq00y1",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"/Users/yueun-oh/Desktop/길JOB이/src/index.js",[],[],[],"/Users/yueun-oh/Desktop/길JOB이/src/App.js",[],[],"/Users/yueun-oh/Desktop/길JOB이/src/pages/Welcome.jsx",[],[],"/Users/yueun-oh/Desktop/길JOB이/src/pages/Onboarding.jsx",["87"],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/index.js",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/App.js",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/DetailPage.jsx",[],[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Welcome.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Home.jsx",["88","89"],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Onboarding.jsx",["90"],[],"import styles from \"./Onboarding.module.css\";\nimport logo from \"../img/logo.png\";\nimport Dropdown from \"../component/Dropdown\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction Onboarding() {\n  let navigate = useNavigate();\n\n  // input을 감싸는 div를 클릭했을 때 input으로 포커스 이동하게 하는 기능\n  const inputRef = useRef(null); // 입력란에 대한 ref 생성\n  const handleDivClick = () => {\n    inputRef.current.focus(); // 입력란에 포커스 이동\n  };\n\n  // 로고에 적용할 클릭 이벤트 함수\n  const goToWelcome = () => {\n    navigate(\"/\");\n  };\n\n  const regionOptions = [\n    \"전체\",\n    \"서울\",\n    \"경기\",\n    \"부산\",\n    \"대구\",\n    \"인천\",\n    \"광주\",\n    \"대전\",\n    \"울산\",\n    \"강원\",\n    \"충북\",\n    \"충남\",\n    \"전북\",\n    \"전남\",\n    \"경북\",\n    \"경남\",\n    \"세종\",\n    \"제주\",\n  ];\n  const educationOptions = [\n    \"고등학교 졸업 미만\",\n    \"고등학교 졸업\",\n    \"대학교 재학\",\n    \"대학교 졸업\",\n    \"석사/박사\",\n    \"무관\",\n  ];\n  const jobStatusOptions = [\n    \"전체\",\n    \"취업 준비생\",\n    \"(예비)창업자\",\n    \"재직자\",\n    \"자영업자\",\n    \"프리랜서\",\n    \"단기 근로자\",\n  ];\n\n  const [age, setAge] = useState(null);\n\n  // region, education, jobStatus 드롭다운 컴포넌트에서 선택된 옵션을 상태로 관리\n  const [selectedRegion, setSelectedRegion] = useState(null);\n  const [selectedEducation, setSelectedEducation] = useState(null);\n  const [selectedJobStatus, setSelectedJobStatus] = useState(null);\n\n  // \"선택완료\" 버튼이 활성화되는지 여부를 결정하는 변수\n  const isButtonDisabled =\n    !selectedRegion || !selectedEducation || !selectedJobStatus || !age;\n\n  //  Onboarding 컴포넌트에서 선택한 정보를 userData 상태로 저장\n  const [userData, setUserData] = useState({\n    region: \"\",\n    education: \"\",\n    jobStatus: \"\",\n    age: null,\n  });\n\n  // 버튼 클릭 : localStorage에 사용자 정보 저장 후 '홈' 페이지로 이동\n  const goToHome = () => {\n    // age 값을 userData에 저장\n    const updatedUserData = {\n      ...userData,\n      age: age,\n    };\n\n    // userData를 업데이트한 후 localStorage에 저장\n    localStorage.setItem(\"userInfo\", JSON.stringify(updatedUserData));\n\n    // navigate 이동\n    navigate(\"/Home\");\n  };\n\n  return (\n    <div className={styles.Onboarding}>\n      <div className={styles.logo} onClick={goToWelcome}>\n        <img src={logo} alt=\"logo\" />\n      </div>\n      <div className={styles.wrapper}>\n        <div className={styles.Onboarding_container}>\n          <div className={styles.Onboarding_content}>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>지역</span>\n              <Dropdown\n                options={regionOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"지역을 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedRegion(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    region: option,\n                  }));\n                }} // 옵션 선택 시 선택한 옵션을 상태로 업데이트\n              />\n            </div>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>학력</span>\n              <Dropdown\n                options={educationOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"학력을 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedEducation(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    education: option,\n                  }));\n                }}\n              />\n            </div>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>구직 상태</span>\n              <Dropdown\n                options={jobStatusOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"구직 상태를 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedJobStatus(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    jobStatus: option,\n                  }));\n                }}\n              />\n            </div>\n            <div\n              className={`${styles.Onboarding_line} ${styles.age_container}`}\n            >\n              <span className={styles.bold}>연령</span>\n              <div className={styles.age_text} onClick={handleDivClick}>\n                <span>만</span>\n                <input\n                  ref={inputRef}\n                  value={age === null ? \"\" : age} // null일 경우 빈 문자열로 표시\n                  onChange={(e) => {\n                    const value = e.target.value; // 입력 값\n                    if (/^\\d*$/.test(value)) {\n                      // 정규식으로 숫자인지 검사\n                      setAge(value);\n                    }\n                  }}\n                />\n              </div>\n              <span className={styles.agefinish}>세</span>\n            </div>\n          </div>\n        </div>\n        <div className={styles.wrapper_bottom}>\n          <button\n            className={`${styles.Onboarding_btn} ${\n              isButtonDisabled ? styles.disabled : \"\"\n            }`}\n            disabled={isButtonDisabled}\n            onClick={() => {\n              goToHome();\n            }}\n          >\n            선택 완료\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Onboarding;\n","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/SearchResults.jsx",["91"],[],"import logo from \"../img/logo.png\";\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./SearchResults.module.css\";\nimport AutoComplete from \"../component/AutoComplete\";\nimport Footer from \"../component/Footer\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Pagination from \"react-js-pagination\";\n\n// 24자 초과할 경우 ..으로 표시\nfunction cutText(text, maxLength) {\n  if (text.length > maxLength) {\n    return text.slice(0, maxLength) + \"..\";\n  }\n  return text;\n}\n\nfunction SearchResults() {\n  const navigate = useNavigate();\n\n  const goToHome = () => {\n    navigate(\"/Home\");\n  };\n\n  const goToDetailPage = () => {\n    navigate(\"/DetailPage\");\n  };\n\n  const [policyData, setPolicyData] = useState({ content: [] }); //  API 응답 데이터를 관리하는 상태 추가\n  const [activePage, setActivePage] = useState(1); // 현재 선택된 페이지 번호 상태 추가\n  const itemsPerPage = 12; // 한 페이지당 보여줄 아이템 개수\n\n  // 로컬 스토리지에 있던 검색 결과 꺼내오기(문자열로 저장해서 JSON 파싱 안해도 됨)\n  const searchText = localStorage.getItem(\"searchText\");\n\n  // 검색 결과를 위한 API 요청 URL 생성\n  const constructApiUrl = () => {\n    return `http://52.79.114.100/api/policies?keyword=${searchText}&pageNumber=${\n      activePage - 1\n    }&pageSize=${itemsPerPage}`;\n  };\n\n  // API 호출 함수 정의\n  const fetchPolicies = async () => {\n    try {\n      const apiUrl = constructApiUrl();\n      const response = await axios.get(apiUrl); // API 요청\n\n      setPolicyData(response.data); // policyData 업데이트\n      console.log(\"searchText:\", searchText);\n      console.log(constructApiUrl());\n    } catch (error) {\n      console.error(\"Error fetching policies:\", error);\n    }\n  };\n\n  // searchText가 변경될 때에만 API를 호출\n  useEffect(() => {\n    if (searchText) {\n      fetchPolicies(); // API 호출\n    }\n  }, [searchText, activePage]);\n\n  // 페이지 번호 변경 핸들러\n  const handlePageChange = (pageNumber) => {\n    setActivePage(pageNumber);\n  };\n\n  return (\n    <div className={styles.Home}>\n      <div className={styles.logo} onClick={goToHome}>\n        <img src={logo} alt=\"logo\" />\n      </div>\n      <div className={styles.search}>\n        <AutoComplete />\n      </div>\n      <div className={styles.SearchResults}>\n        <div className={styles.search_text}>\n          <h1>\n            <span>'{searchText}'</span> 검색 결과\n          </h1>\n        </div>\n        <div className={styles.card_box}>\n          {policyData.content.map((policy, index) => (\n            <div key={index} className={styles.card} onClick={goToDetailPage}>\n              <div className={styles.card_text}>{cutText(policy.name, 24)}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <Pagination\n        activePage={activePage} // 현재 활성화된 페이지 번호\n        itemsCountPerPage={itemsPerPage} // 페이지당 보여줄 아이템 개수\n        totalItemsCount={policyData.totalElements} // 전체 아이템 개수로 변경\n        pageRangeDisplayed={5} // 페이지 번호 버튼의 범위 (양 옆으로 몇 개의 페이지 번호를 보여줄지)\n        onChange={handlePageChange} // 페이지 번호 변경 시 호출되는 함수\n        activeClass={styles.custom_active} // 활성화된 페이지 스타일\n        itemClass={styles.custom_page_item} // 페이지 아이템 스타일\n        linkClass={styles.custom_page_link} // 페이지 링크 스타일\n      />\n      <Footer />\n    </div>\n  );\n}\n\nexport default SearchResults;\n","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ScrollToTop.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Footer.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ModalContent.jsx",["92","93"],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/AutoComplete.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Dropdown.jsx",[],[],{"ruleId":"94","severity":1,"message":"95","line":2,"column":8,"nodeType":"96","messageId":"97","endLine":2,"endColumn":12},{"ruleId":"98","severity":1,"message":"99","line":110,"column":6,"nodeType":"100","endLine":110,"endColumn":20,"suggestions":"101"},{"ruleId":"98","severity":1,"message":"102","line":134,"column":6,"nodeType":"100","endLine":134,"endColumn":22,"suggestions":"103"},{"ruleId":"94","severity":1,"message":"104","line":4,"column":20,"nodeType":"96","messageId":"97","endLine":4,"endColumn":29},{"ruleId":"98","severity":1,"message":"102","line":62,"column":6,"nodeType":"100","endLine":62,"endColumn":30,"suggestions":"105"},{"ruleId":"98","severity":1,"message":"106","line":82,"column":6,"nodeType":"100","endLine":82,"endColumn":8,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":126,"column":15,"nodeType":"110","endLine":126,"endColumn":63},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'translationMap' and 'userInfo'. Either include them or remove the dependency array.","ArrayExpression",["111"],"React Hook useEffect has a missing dependency: 'fetchPolicies'. Either include it or remove the dependency array.",["112"],"'useEffect' is defined but never used.",["113"],"React Hook useEffect has missing dependencies: 'educationOptions', 'jobStatusOptions', 'regionOptions', and 'userInfo'. Either include them or remove the dependency array.",["114"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [searchZIndex, translationMap, userInfo]",{"range":"123","text":"124"},"Update the dependencies array to be: [fetchPolicies, translatedData]",{"range":"125","text":"126"},"Update the dependencies array to be: [searchText, activePage, fetchPolicies]",{"range":"127","text":"128"},"Update the dependencies array to be: [educationOptions, jobStatusOptions, regionOptions, userInfo]",{"range":"129","text":"130"},[2988,3002],"[searchZIndex, translationMap, userInfo]",[3833,3849],"[fetchPolicies, translatedData]",[1742,1766],"[searchText, activePage, fetchPolicies]",[1954,1956],"[educationOptions, jobStatusOptions, regionOptions, userInfo]"]