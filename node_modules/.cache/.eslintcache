[{"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/index.js":"1","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/App.js":"2","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/DetailPage.jsx":"3","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Welcome.jsx":"4","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Home.jsx":"5","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Onboarding.jsx":"6","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/SearchResults.jsx":"7","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ScrollToTop.jsx":"8","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Footer.jsx":"9","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ModalContent.jsx":"10","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/AutoComplete.jsx":"11","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Dropdown.jsx":"12"},{"size":669,"mtime":1692284246790,"results":"13","hashOfConfig":"14"},{"size":859,"mtime":1692342003504,"results":"15","hashOfConfig":"14"},{"size":8351,"mtime":1692364998341,"results":"16","hashOfConfig":"14"},{"size":925,"mtime":1692187041000,"results":"17","hashOfConfig":"14"},{"size":6246,"mtime":1692359583097,"results":"18","hashOfConfig":"14"},{"size":8034,"mtime":1692348353603,"results":"19","hashOfConfig":"14"},{"size":5868,"mtime":1692345132023,"results":"20","hashOfConfig":"14"},{"size":306,"mtime":1692187041000,"results":"21","hashOfConfig":"14"},{"size":663,"mtime":1692187041000,"results":"22","hashOfConfig":"14"},{"size":7831,"mtime":1692326497094,"results":"23","hashOfConfig":"14"},{"size":4905,"mtime":1692366414685,"results":"24","hashOfConfig":"14"},{"size":2656,"mtime":1692289910307,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"gq00y1",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"29"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/index.js",[],[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/App.js",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/DetailPage.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Welcome.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Home.jsx",["67"],[],"import logo from \"../img/logo.png\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport styles from \"./Home.module.css\";\nimport ModalContent from \"../component/ModalContent\";\nimport AutoComplete from \"../component/AutoComplete\";\nimport Footer from \"../component/Footer\";\nimport { useNavigate } from \"react-router-dom\";\nimport Modal from \"react-modal\";\n\nconst Home = () => {\n  const [rankData, setRankData] = useState([]);\n  const [policyData, setPolicyData] = useState({ content: [] }); //  API 응답 데이터를 관리하는 상태 추가\n\n  useEffect(() => {\n    // 컴포넌트가 마운트되었을 때 주요 콘텐츠 엘리먼트를 정의\n    Modal.setAppElement(\"#root\");\n  }, []);\n\n  const navigate = useNavigate();\n\n  const [searchZIndex, setSearchZIndex] = useState(1); // 모달창을 열고 닫을때 검색창의 z-index를 조절(안하면 모달창 열어도 검색창 뜸)\n\n  useEffect(() => {\n    // API 요청\n    const apiUrl = \"https://www.giljob-e.shop/api/policies/rank?pageSize=5\";\n\n    axios\n      .get(apiUrl)\n      .then((response) => {\n        // API에서 받아온 데이터 중에서 이름(name) 정보와 bizid를 추출하여 rankData에 설정\n        const newRankData = response.data.map((item) => ({\n          name: item.name,\n          bizId: item.bizId,\n        }));\n        setRankData(newRankData);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching rank data:\", error);\n      });\n  }, []); // 빈 배열을 넣어 한 번만 호출되도록 설정\n\n  // 모달 열릴 때 z-index 값을 변경\n  const openModal = () => {\n    setSearchZIndex(0);\n  };\n\n  // 모달 닫힐 때 z-index 값을 원래대로 변경\n  const closeModal = () => {\n    setSearchZIndex(1);\n  };\n\n  const goToHome = () => {\n    navigate(\"/Home\");\n  };\n\n  // 정책 상세 페이지로 이동\n  const goToDetailPage = (bizId) => {\n    // 해당 정책의 bizid를 사용하여 DetailPage로 이동\n    navigate(`/DetailPage/${bizId}`);\n  };\n\n  // 24자 초과할 경우 ..으로 표시\n  function cutText(text, maxLength) {\n    if (text.length > maxLength) {\n      return text.slice(0, maxLength) + \"..\";\n    }\n    return text;\n  }\n\n  // 한국어로 저장된 localStorage의 값을 가져와서 영어로 변환하여 Swagger의 파라미터와 일치시켜야 함\n  // 변환 매핑 생성\n  const translationMap = {\n    전체: \"ALL\",\n    부산: \"BUSAN\",\n    충북: \"CHUNGBUK\",\n    충남: \"DAEGU\",\n    대구: \"DAEJEON\",\n    강원: \"GANGWON\",\n    광주: \"GWANGJU\",\n    경북: \"GYONGBUK\",\n    경남: \"GYEONGNAM\",\n    경기: \"GYOUNGGI\",\n    인천: \"INCHEON\",\n    제주: \"JEJU\",\n    전북: \"JEONBUK\",\n    전남: \"JEONNAM\",\n    세종: \"SEJONG\",\n    울산: \"ULSAN\",\n    서울: \"SEOUL\",\n    \"고등학교 졸업 미만\": \"UNDER_HIGH_SCHOOL\",\n    \"고등학교 졸업\": \"HIGH_SCHOOL_GRADUATE\",\n    \"대학교 재학\": \"COLLEGE_STUDENT\",\n    \"대학교 졸업\": \"COLLEGE_GRADUATE\",\n    \"석사/박사\": \"DOCTORATE\",\n    무관: \"ALL\",\n    \"취업 준비생\": \"JOB_SEEKER\",\n    \"(예비)창업자\": \"ENTREPRENEUR\",\n    재직자: \"EMPLOYEE\",\n    자영업자: \"SELF_EMPLOYED\",\n    프리랜서: \"FREELANCER\",\n    \"단기 근로자\": \"TEMPORARY_WORKER\",\n  };\n\n  // 맞춤 추천을 위한 API 요청 URL 생성\n  const constructApiUrl = (tmpData) => {\n    return `https://www.giljob-e.shop/api/policies/recommendation?age=${tmpData.age}&education=${tmpData.education}&jobStatus=${tmpData.jobStatus}&pageNumber=0&pageSize=4&residence=${tmpData.region}`;\n  };\n\n  // API 호출 함수 정의\n  const fetchPolicies = (tmpData) => {\n    axios\n      .get(constructApiUrl(tmpData))\n      .then((res) => {\n        console.log(res);\n        setPolicyData(res.data);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // 로컬 스토리지에서 사용자 정보를 가져옴\n  const getData = () => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\")); //이건 어차피 알아서 받아와지는거 굳이 상태처리할필요없음\n\n    if (userInfo) {\n      const tmpData = {\n        region: translationMap[userInfo.region],\n        education: translationMap[userInfo.education],\n        jobStatus: translationMap[userInfo.jobStatus],\n        age: parseInt(userInfo.age),\n      };\n      fetchPolicies(tmpData); //비동기 await~~해서 위에 로컬스토리지에서 받아온 객체 넣어줌\n    }\n  };\n\n  useEffect(getData, []);\n\n  return (\n    <div className={styles.Home}>\n      <div className={styles.logo} onClick={goToHome}>\n        <img src={logo} alt=\"logo\" />\n      </div>\n      <div className={styles.search} style={{ zIndex: searchZIndex }}>\n        <AutoComplete></AutoComplete>\n      </div>\n      <div className={styles.recommend}>\n        <div className={styles.recotitle}>\n          <span>맞춤 일자리 정책 추천</span>\n          <ModalContent\n            openModal={openModal}\n            closeModal={closeModal}\n            getData={getData}\n          />\n        </div>\n        {/* 배열 매핑으로 맞춤 추천 최종 구현!*/}\n        <div className={styles.card_box}>\n          {policyData.content.map((policy, index) => (\n            <div\n              className={styles.card}\n              onClick={() => goToDetailPage(policy.bizId)}\n              key={index}\n            >\n              <div className={styles.card_text}>{cutText(policy.name, 24)}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className={styles.rank}>\n        <div className={styles.ranktitle}>\n          <span>실시간 청년 일자리 정책 순위</span>\n        </div>\n        <div className={styles.ranklist}>\n          <ul>\n            {/* rankData를 이용하여 정책 순위 리스트 생성 */}\n            {rankData.map((policy, index) => (\n              <li key={index} onClick={() => goToDetailPage(policy.bizId)}>\n                <span className={styles.ranknum}>{index + 1}</span>\n                {/* 정책 이름 버튼을 클릭할 때 해당 정책의 bizid를 전달 */}\n                <button className={styles.jobtitle}>{policy.name}</button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Onboarding.jsx",["68","69"],[],"import styles from \"./Onboarding.module.css\";\nimport axios from \"axios\";\nimport logo from \"../img/logo.png\";\nimport Dropdown from \"../component/Dropdown\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction Onboarding() {\n  const navigate = useNavigate();\n  const [policyData, setPolicyData] = useState({ content: [] });\n\n  // input을 감싸는 div를 클릭했을 때 input으로 포커스 이동하게 하는 기능\n  const inputRef = useRef(null); // 입력란에 대한 ref 생성\n  const handleDivClick = () => {\n    inputRef.current.focus(); // 입력란에 포커스 이동\n  };\n\n  // 로고에 적용할 클릭 이벤트 함수\n  const goToWelcome = () => {\n    navigate(\"/\");\n  };\n\n  const regionOptions = [\n    \"전체\",\n    \"서울\",\n    \"경기\",\n    \"부산\",\n    \"대구\",\n    \"인천\",\n    \"광주\",\n    \"대전\",\n    \"울산\",\n    \"강원\",\n    \"충북\",\n    \"충남\",\n    \"전북\",\n    \"전남\",\n    \"경북\",\n    \"경남\",\n    \"세종\",\n    \"제주\",\n  ];\n  const educationOptions = [\n    \"고등학교 졸업 미만\",\n    \"고등학교 졸업\",\n    \"대학교 재학\",\n    \"대학교 졸업\",\n    \"석사/박사\",\n    \"무관\",\n  ];\n  const jobStatusOptions = [\n    \"전체\",\n    \"취업 준비생\",\n    \"(예비)창업자\",\n    \"재직자\",\n    \"자영업자\",\n    \"프리랜서\",\n    \"단기 근로자\",\n  ];\n\n  const [age, setAge] = useState(null);\n\n  // region, education, jobStatus 드롭다운 컴포넌트에서 선택된 옵션을 상태로 관리\n  const [selectedRegion, setSelectedRegion] = useState(null);\n  const [selectedEducation, setSelectedEducation] = useState(null);\n  const [selectedJobStatus, setSelectedJobStatus] = useState(null);\n\n  // \"선택완료\" 버튼이 활성화되는지 여부를 결정하는 변수\n  const isButtonDisabled =\n    !selectedRegion || !selectedEducation || !selectedJobStatus || !age;\n\n  //  Onboarding 컴포넌트에서 선택한 정보를 userData 상태로 저장\n  const [userData, setUserData] = useState({\n    region: \"\",\n    education: \"\",\n    jobStatus: \"\",\n    age: null,\n  });\n\n  // 버튼 클릭 : localStorage에 사용자 정보 저장 후 '홈' 페이지로 이동\n  const goToHome = async () => {\n    // age 값을 userData에 저장\n    const updatedUserData = {\n      ...userData,\n      age: age,\n    };\n\n    // userData를 업데이트한 후 localStorage에 저장\n    localStorage.setItem(\"userInfo\", JSON.stringify(updatedUserData));\n\n    try {\n      getData();\n      navigate(\"/Home\"); // 통신 성공하면 Home으로 이동\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const translationMap = {\n    전체: \"ALL\",\n    부산: \"BUSAN\",\n    충북: \"CHUNGBUK\",\n    충남: \"DAEGU\",\n    대구: \"DAEJEON\",\n    강원: \"GANGWON\",\n    광주: \"GWANGJU\",\n    경북: \"GYONGBUK\",\n    경남: \"GYEONGNAM\",\n    경기: \"GYOUNGGI\",\n    인천: \"INCHEON\",\n    제주: \"JEJU\",\n    전북: \"JEONBUK\",\n    전남: \"JEONNAM\",\n    세종: \"SEJONG\",\n    울산: \"ULSAN\",\n    서울: \"SEOUL\",\n    \"고등학교 졸업 미만\": \"UNDER_HIGH_SCHOOL\",\n    \"고등학교 졸업\": \"HIGH_SCHOOL_GRADUATE\",\n    \"대학교 재학\": \"COLLEGE_STUDENT\",\n    \"대학교 졸업\": \"COLLEGE_GRADUATE\",\n    \"석사/박사\": \"DOCTORATE\",\n    무관: \"ALL\",\n    \"취업 준비생\": \"JOB_SEEKER\",\n    \"(예비)창업자\": \"ENTREPRENEUR\",\n    재직자: \"EMPLOYEE\",\n    자영업자: \"SELF_EMPLOYED\",\n    프리랜서: \"FREELANCER\",\n    \"단기 근로자\": \"TEMPORARY_WORKER\",\n  };\n\n  // 맞춤 추천을 위한 API 요청 URL 생성\n  const constructApiUrl = (tmpData) => {\n    return `https://www.giljob-e.shop/api/policies?age=${tmpData.age}&education=${tmpData.education}&jobStatus=${tmpData.jobStatus}&pageNumber=0&pageSize=4&residence=${tmpData.region}`;\n  };\n\n  // API 호출 함수 정의\n  const fetchPolicies = (tmpData) => {\n    axios\n      .get(constructApiUrl(tmpData))\n      .then((res) => {\n        console.log(res);\n        setPolicyData(res.data);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // 로컬 스토리지에서 사용자 정보를 가져옴\n  const getData = () => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (userInfo) {\n      const tmpData = {\n        region: translationMap[userInfo.region],\n        education: translationMap[userInfo.education],\n        jobStatus: translationMap[userInfo.jobStatus],\n        age: parseInt(userInfo.age),\n      };\n      fetchPolicies(tmpData); //비동기 await~~해서 위에 로컬스토리지에서 받아온 객체 넣어줌\n    }\n  };\n\n  useEffect(getData, []);\n\n  return (\n    <div className={styles.Onboarding}>\n      <div className={styles.logo} onClick={goToWelcome}>\n        <img src={logo} alt=\"logo\" />\n      </div>\n      <div className={styles.wrapper}>\n        <div className={styles.Onboarding_container}>\n          <div className={styles.Onboarding_content}>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>지역</span>\n              <Dropdown\n                options={regionOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"지역을 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedRegion(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    region: option,\n                  }));\n                }} // 옵션 선택 시 선택한 옵션을 상태로 업데이트\n              />\n            </div>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>학력</span>\n              <Dropdown\n                options={educationOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"학력을 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedEducation(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    education: option,\n                  }));\n                }}\n              />\n            </div>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>구직 상태</span>\n              <Dropdown\n                options={jobStatusOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"구직 상태를 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedJobStatus(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    jobStatus: option,\n                  }));\n                }}\n              />\n            </div>\n            <div\n              className={`${styles.Onboarding_line} ${styles.age_container}`}\n            >\n              <span className={styles.bold}>연령</span>\n              <div className={styles.age_text} onClick={handleDivClick}>\n                <span>만</span>\n                <input\n                  ref={inputRef}\n                  value={age === null ? \"\" : age} // null일 경우 빈 문자열로 표시\n                  onChange={(e) => {\n                    const value = e.target.value; // 입력 값\n                    if (/^\\d*$/.test(value)) {\n                      // 정규식으로 숫자인지 검사\n                      setAge(value);\n                    }\n                  }}\n                />\n              </div>\n              <span className={styles.agefinish}>세</span>\n            </div>\n          </div>\n        </div>\n        <div className={styles.wrapper_bottom}>\n          <button\n            className={`${styles.Onboarding_btn} ${\n              isButtonDisabled ? styles.disabled : \"\"\n            }`}\n            disabled={isButtonDisabled}\n            onClick={() => {\n              goToHome();\n            }}\n          >\n            선택 완료\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Onboarding;\n","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/SearchResults.jsx",["70","71","72","73"],[],"import logo from \"../img/logo.png\";\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./SearchResults.module.css\";\nimport AutoComplete from \"../component/AutoComplete\";\nimport Footer from \"../component/Footer\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Pagination from \"react-js-pagination\";\n\n// 24자 초과할 경우 ..으로 표시\nfunction cutText(text, maxLength) {\n  if (text.length > maxLength) {\n    return text.slice(0, maxLength) + \"..\";\n  }\n  return text;\n}\n\nfunction SearchResults() {\n  const navigate = useNavigate();\n\n  // 이전에 보던 페이지 번호를 저장할 상태\n  const [lastPageVisited, setLastPageVisited] = useState(1);\n  const [visitedPages, setVisitedPages] = useState([1]); // 이전에 방문한 페이지 번호를 저장하는 상태\n\n  const goToHome = () => {\n    navigate(\"/Home\");\n  };\n\n  // 정책 상세 페이지로 이동\n  const goToDetailPage = (bizId) => {\n    // 현재 페이지 번호 저장\n    setLastPageVisited(activePage);\n    // 해당 정책의 bizid를 사용하여 DetailPage로 이동\n    navigate(`/DetailPage/${bizId}`);\n  };\n\n  const [policyData, setPolicyData] = useState({ content: [] }); //  API 응답 데이터를 관리하는 상태 추가\n  const [activePage, setActivePage] = useState(1); // 현재 선택된 페이지 번호 상태 추가\n  const itemsPerPage = 12; // 한 페이지당 보여줄 아이템 개수\n\n  // 로컬 스토리지에 있던 검색 결과 꺼내오기(문자열로 저장해서 JSON 파싱 안해도 됨)\n  const searchText = localStorage.getItem(\"searchText\");\n\n  // 검색 결과를 위한 API 요청 URL 생성\n  const constructApiUrl = () => {\n    return `https://www.giljob-e.shop/api/policies?keyword=${searchText}&pageNumber=${\n      activePage - 1\n    }&pageSize=${itemsPerPage}`;\n  };\n\n  // API 호출 함수 정의\n  const fetchPolicies = async () => {\n    try {\n      const apiUrl = constructApiUrl();\n      const response = await axios.get(apiUrl); // API 요청\n\n      setPolicyData(response.data); // policyData 업데이트\n      console.log(\"searchText:\", searchText);\n      console.log(constructApiUrl());\n    } catch (error) {\n      console.error(\"Error fetching policies:\", error);\n    }\n  };\n\n  // searchText가 변경될 때에만 API를 호출\n  useEffect(() => {\n    if (searchText) {\n      if (activePage === 1) {\n        setActivePage(lastPageVisited);\n      }\n      fetchPolicies(); // API 호출\n    }\n  }, [searchText, lastPageVisited, activePage]);\n\n  // 뒤로 가기를 눌렀을 때 이전 페이지 번호를 확인하고 설정\n  useEffect(() => {\n    window.onpopstate = (event) => {\n      if (event.state) {\n        setActivePage(event.state.page);\n        setLastPageVisited(event.state.page);\n      }\n    };\n  }, []);\n\n  // // 페이지 번호 변경 시 호출되는 함수(안 쓰길래 일단 주석처리)\n  // const handlePageChange = (pageNumber) => {\n  //   setActivePage(pageNumber);\n\n  //   if (!visitedPages.includes(pageNumber)) {\n  //     setVisitedPages([...visitedPages, pageNumber]);\n  //   }\n\n  //   // 브라우저 히스토리에 현재 페이지 정보를 저장\n  //   window.history.pushState({ page: pageNumber }, \"\", \"\");\n  //   setLastPageVisited(pageNumber);\n  // };\n\n  // 새로고침했을 때 현재 페이지 정보 유지\n  // 페이지 로드 시 URL의 쿼리 매개변수에서 페이지 번호 읽어와 활성 페이지 설정\n  useEffect(() => {\n    const queryParams = new URLSearchParams(window.location.search);\n    const pageParam = queryParams.get(\"page\");\n    const initialPage = pageParam ? parseInt(pageParam) : lastPageVisited; // 변경된 부분\n    setActivePage(initialPage);\n    setLastPageVisited(initialPage);\n  }, []);\n\n  return (\n    <div className={styles.Home}>\n      <div className={styles.logo} onClick={goToHome}>\n        <img src={logo} alt=\"logo\" />\n      </div>\n      <div className={styles.search}>\n        <AutoComplete />\n      </div>\n      <div className={styles.SearchResults}>\n        <div className={styles.search_text}>\n          <h1>\n            <span>'{cutText(searchText, 27)}'</span> 검색 결과\n          </h1>\n        </div>\n        <div className={styles.card_box}>\n          {policyData.content.map((policy, index) => (\n            <div\n              key={index}\n              className={styles.card}\n              onClick={() => goToDetailPage(policy.bizId)}\n            >\n              <div className={styles.card_text}>{cutText(policy.name, 24)}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <Pagination\n        activePage={activePage} // 현재 활성화된 페이지 번호\n        itemsCountPerPage={itemsPerPage} // 페이지당 보여줄 아이템 개수\n        totalItemsCount={policyData.totalElements} // 전체 아이템 개수로 변경\n        pageRangeDisplayed={5} // 페이지 번호 버튼의 범위 (양 옆으로 몇 개의 페이지 번호를 보여줄지)\n        prevPageText=\"<\"\n        nextPageText=\">\"\n        hideFirstLastPages={true} /* 맨 앞과 끝 페이지 버튼이 숨겨짐 */\n        onChange={(pageNumber) => {\n          if (pageNumber !== lastPageVisited) {\n            window.history.pushState({ page: pageNumber }, \"\", \"\"); // 현재 페이지 번호와 이전에 보던 페이지 번호가 다른 경우 브라우저 히스토리에 페이지 정보를 저장\n            setLastPageVisited(pageNumber);\n          }\n          setActivePage(pageNumber);\n        }} // 페이지 번호 변경 시 호출되는 함수\n        activeClass={styles.custom_active} // 활성화된 페이지 스타일\n        itemClass={styles.custom_page_item} // 페이지 아이템 스타일\n        linkClass={styles.custom_page_link} // 페이지 링크 스타일\n      />\n      <Footer />\n    </div>\n  );\n}\n\nexport default SearchResults;\n","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ScrollToTop.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Footer.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ModalContent.jsx",["74","75"],[],"import Modal from \"react-modal\";\nimport Dropdown from \"./Dropdown\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport filter from \"../img/filter.png\";\nimport cancel from \"../img/cancel.png\";\nimport styles from \"./ModalContent.module.css\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst ModalContent = ({ openModal, closeModal, getData }) => {\n  let navigate = useNavigate();\n\n  // input을 감싸는 div를 클릭했을 때 input으로 포커스 이동하게 하는 기능\n  const inputRef = useRef(null); // 입력란에 대한 ref 생성\n  const handleDivClick = () => {\n    inputRef.current.focus(); // 입력란에 포커스 이동\n  };\n\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n\n  const handleModalOpen = () => {\n    setModalIsOpen(true);\n  };\n\n  const regionOptions = [\n    \"전체\",\n    \"서울\",\n    \"경기\",\n    \"부산\",\n    \"대구\",\n    \"인천\",\n    \"광주\",\n    \"대전\",\n    \"울산\",\n    \"강원\",\n    \"충북\",\n    \"충남\",\n    \"전북\",\n    \"전남\",\n    \"경북\",\n    \"경남\",\n    \"세종\",\n    \"제주\",\n  ];\n  const educationOptions = [\n    \"고등학교 졸업 미만\",\n    \"고등학교 졸업\",\n    \"대학교 재학\",\n    \"대학교 졸업\",\n    \"석사/박사\",\n    \"무관\",\n  ];\n  const jobStatusOptions = [\n    \"전체\",\n    \"취업 준비생\",\n    \"(예비)창업자\",\n    \"재직자\",\n    \"자영업자\",\n    \"프리랜서\",\n    \"단기 근로자\",\n  ];\n\n  const [age, setAge] = useState(null);\n  const [selectedRegion, setSelectedRegion] = useState(regionOptions[0]);\n  const [selectedEducation, setSelectedEducation] = useState(\n    educationOptions[0]\n  );\n  const [selectedJobStatus, setSelectedJobStatus] = useState(\n    jobStatusOptions[0]\n  );\n\n  // 로컬 스토리지에서 사용자 정보를 가져옴\n  const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n  useEffect(() => {\n    if (userInfo) {\n      // Modal이 열릴 때마다 저장된 사용자 정보를 가져와서 미리 설정\n      setSelectedRegion(userInfo.region || regionOptions[0]);\n      setSelectedEducation(userInfo.education || educationOptions[0]);\n      setSelectedJobStatus(userInfo.jobStatus || jobStatusOptions[0]);\n      setAge(userInfo.age);\n    }\n  }, []);\n\n  //  Onboarding 컴포넌트에서 선택한 정보를 userData 상태로 저장(userData의 초기 값을 localStorage 정보로 교체!)\n  const [userData, setUserData] = useState({\n    region: userInfo.region,\n    education: userInfo.education,\n    jobStatus: userInfo.jobStatus,\n    age: age,\n  });\n\n  // 버튼 클릭 : localStorage에 사용자 정보 저장 후 '홈' 페이지로 이동\n  const goToHome = async () => {\n    // age 값을 userData에 저장\n    const updatedUserData = {\n      ...userData,\n      age: age,\n    };\n\n    // userData를 업데이트한 후 localStorage에 저장\n    localStorage.setItem(\"userInfo\", JSON.stringify(updatedUserData));\n\n    try {\n      getData();\n      navigate(\"/Home\"); //통신 성공하면 Home으로 이동\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <div>\n      <button\n        className={styles.filterbutton}\n        onClick={() => {\n          handleModalOpen();\n          openModal();\n        }}\n      >\n        <img src={filter} className={styles.filtericon} alt=\"filtericon\"></img>\n      </button>\n      <Modal\n        className={styles.modal}\n        isOpen={modalIsOpen}\n        onRequestClose={() => setModalIsOpen(false)}\n      >\n        <div className={styles.modalbody}>\n          <div className={styles.header}>\n            <div className={styles.headerleft}>\n              <img src={filter} className={styles.headericon}></img>\n              <span>필터</span>\n            </div>\n            <div className={styles.headerright}>\n              <button\n                className={styles.filterx}\n                onClick={() => {\n                  setModalIsOpen(false);\n                  closeModal();\n                }}\n              >\n                <img src={cancel} alt=\"cancel\"></img>\n              </button>\n            </div>\n          </div>\n          <div className={styles.content}>\n            <div className={styles.Onboarding_content}>\n              <div className={styles.Onboarding_line}>\n                <span className={styles.bold}>지역</span>\n                <Dropdown\n                  options={regionOptions}\n                  className={styles.Onboarding_dropdown}\n                  defaultOption=\"지역을 선택해주세요\"\n                  initialSelected={selectedRegion}\n                  onSelect={(option) => {\n                    setSelectedRegion(option);\n                    setUserData((prevUserData) => ({\n                      ...prevUserData,\n                      region: option,\n                    }));\n                  }} // 옵션 선택 시 선택한 옵션을 상태로 업데이트\n                />\n              </div>\n              <div className={styles.Onboarding_line}>\n                <span className={styles.bold}>학력</span>\n                <Dropdown\n                  options={educationOptions}\n                  className={styles.Onboarding_dropdown}\n                  defaultOption=\"학력을 선택해주세요\"\n                  initialSelected={selectedEducation}\n                  onSelect={(option) => {\n                    setSelectedEducation(option);\n                    setUserData((prevUserData) => ({\n                      ...prevUserData,\n                      education: option,\n                    }));\n                  }}\n                />\n              </div>\n              <div className={styles.Onboarding_line}>\n                <span className={styles.bold}>구직 상태</span>\n                <Dropdown\n                  options={jobStatusOptions}\n                  className={styles.Onboarding_dropdown}\n                  defaultOption=\"구직 상태를 선택해주세요\"\n                  initialSelected={selectedJobStatus}\n                  onSelect={(option) => {\n                    setSelectedJobStatus(option);\n                    setUserData((prevUserData) => ({\n                      ...prevUserData,\n                      jobStatus: option,\n                    }));\n                  }}\n                />\n              </div>\n              <div\n                className={`${styles.Onboarding_line} ${styles.age_container}`}\n              >\n                <span className={styles.bold}>연령</span>\n                <div className={styles.age_text} onClick={handleDivClick}>\n                  <span>만</span>\n                  <input\n                    ref={inputRef}\n                    value={age === null ? \"\" : age} // null일 경우 빈 문자열로 표시\n                    onChange={(e) => {\n                      const value = e.target.value; // 입력 값\n                      if (/^\\d*$/.test(value)) {\n                        // 정규식으로 숫자인지 검사\n                        setAge(value);\n                      }\n                    }}\n                  />\n                </div>\n                <span className={styles.agefinish}>세</span>\n              </div>\n            </div>\n          </div>\n          <div className={styles.wrapper_bottom}>\n            {/* 어차피 필터는 온보딩 등록된 후 -> 나이를 지우는 경우만 생각해서 비활성화 기능 만들었음 */}\n            <button\n              className={`${styles.Onboarding_btn} ${\n                !age ? styles.disabled : \"\"\n              }`}\n              disabled={!age}\n              onClick={() => {\n                setModalIsOpen(false);\n                closeModal();\n                goToHome();\n              }}\n            >\n              선택 완료\n            </button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ModalContent;\n","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/AutoComplete.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Dropdown.jsx",[],[],{"ruleId":"76","severity":1,"message":"77","line":136,"column":22,"nodeType":"78","endLine":136,"endColumn":24,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":10,"column":10,"nodeType":"82","messageId":"83","endLine":10,"endColumn":20},{"ruleId":"76","severity":1,"message":"77","line":162,"column":22,"nodeType":"78","endLine":162,"endColumn":24,"suggestions":"84"},{"ruleId":"80","severity":1,"message":"85","line":23,"column":10,"nodeType":"82","messageId":"83","endLine":23,"endColumn":22},{"ruleId":"80","severity":1,"message":"86","line":23,"column":24,"nodeType":"82","messageId":"83","endLine":23,"endColumn":39},{"ruleId":"76","severity":1,"message":"87","line":73,"column":6,"nodeType":"78","endLine":73,"endColumn":47,"suggestions":"88"},{"ruleId":"76","severity":1,"message":"89","line":106,"column":6,"nodeType":"78","endLine":106,"endColumn":8,"suggestions":"90"},{"ruleId":"76","severity":1,"message":"91","line":82,"column":6,"nodeType":"78","endLine":82,"endColumn":8,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":130,"column":15,"nodeType":"95","endLine":130,"endColumn":63},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchPolicies' and 'translationMap'. Either include them or remove the dependency array.","ArrayExpression",["96"],"no-unused-vars","'policyData' is assigned a value but never used.","Identifier","unusedVar",["97"],"'visitedPages' is assigned a value but never used.","'setVisitedPages' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchPolicies'. Either include it or remove the dependency array.",["98"],"React Hook useEffect has a missing dependency: 'lastPageVisited'. Either include it or remove the dependency array.",["99"],"React Hook useEffect has missing dependencies: 'educationOptions', 'jobStatusOptions', 'regionOptions', and 'userInfo'. Either include them or remove the dependency array.",["100"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"101","fix":"102"},{"desc":"101","fix":"103"},{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},"Update the dependencies array to be: [fetchPolicies, translationMap]",{"range":"110","text":"111"},{"range":"112","text":"111"},"Update the dependencies array to be: [searchText, lastPageVisited, activePage, fetchPolicies]",{"range":"113","text":"114"},"Update the dependencies array to be: [lastPageVisited]",{"range":"115","text":"116"},"Update the dependencies array to be: [educationOptions, jobStatusOptions, regionOptions, userInfo]",{"range":"117","text":"118"},[3680,3682],"[fetchPolicies, translationMap]",[3802,3804],[2128,2169],"[searchText, lastPageVisited, activePage, fetchPolicies]",[3165,3167],"[lastPageVisited]",[1882,1884],"[educationOptions, jobStatusOptions, regionOptions, userInfo]"]