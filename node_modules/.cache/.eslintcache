[{"/Users/yueun-oh/Desktop/길JOB이/src/index.js":"1","/Users/yueun-oh/Desktop/길JOB이/src/App.js":"2","/Users/yueun-oh/Desktop/길JOB이/src/pages/Welcome.jsx":"3","/Users/yueun-oh/Desktop/길JOB이/src/pages/Onboarding.jsx":"4","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/index.js":"5","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/App.js":"6","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/pages/Home.jsx":"7","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/pages/DetailPage.jsx":"8","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/pages/Welcome.jsx":"9","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/ScrollToTop.jsx":"10","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/pages/Onboarding.jsx":"11","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/SearchResults.jsx":"12","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/AutoComplete.jsx":"13","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/Footer.jsx":"14","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/ModalContent.jsx":"15","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/Dropdown.jsx":"16"},{"size":467,"mtime":1691100377546,"results":"17","hashOfConfig":"18"},{"size":454,"mtime":1691161672159,"results":"19","hashOfConfig":"18"},{"size":923,"mtime":1691166103107,"results":"20","hashOfConfig":"18"},{"size":172,"mtime":1691165777646,"results":"21","hashOfConfig":"18"},{"size":468,"mtime":1691574161913,"results":"22","hashOfConfig":"23"},{"size":848,"mtime":1691574299588,"results":"24","hashOfConfig":"23"},{"size":4011,"mtime":1691630511645,"results":"25","hashOfConfig":"23"},{"size":1262,"mtime":1691575552211,"results":"26","hashOfConfig":"23"},{"size":921,"mtime":1691574656661,"results":"27","hashOfConfig":"23"},{"size":306,"mtime":1691573881638,"results":"28","hashOfConfig":"23"},{"size":5381,"mtime":1691627021199,"results":"29","hashOfConfig":"23"},{"size":2468,"mtime":1691631218940,"results":"30","hashOfConfig":"23"},{"size":2921,"mtime":1691631092215,"results":"31","hashOfConfig":"23"},{"size":686,"mtime":1691572882726,"results":"32","hashOfConfig":"23"},{"size":7239,"mtime":1691629098107,"results":"33","hashOfConfig":"23"},{"size":2475,"mtime":1691628070019,"results":"34","hashOfConfig":"23"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"tygnch",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xr6d1n",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yueun-oh/Desktop/길JOB이/src/index.js",[],[],[],"/Users/yueun-oh/Desktop/길JOB이/src/App.js",[],[],"/Users/yueun-oh/Desktop/길JOB이/src/pages/Welcome.jsx",[],[],"/Users/yueun-oh/Desktop/길JOB이/src/pages/Onboarding.jsx",["87"],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/index.js",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/App.js",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/pages/Home.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/pages/DetailPage.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/pages/Welcome.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/ScrollToTop.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/pages/Onboarding.jsx",["88"],[],"import styles from \"./Onboarding.module.css\";\nimport logo from \"../img/logo.png\";\nimport Dropdown from \"../component/Dropdown\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction Onboarding() {\n  let navigate = useNavigate();\n\n  // 로고에 적용할 클릭 이벤트 함수\n  const goToWelcome = () => {\n    navigate(\"/\");\n  };\n\n  const regionOptions = [\n    \"전체\",\n    \"서울\",\n    \"부산\",\n    \"대구\",\n    \"인천\",\n    \"광주\",\n    \"대전\",\n    \"울산\",\n    \"경기\",\n    \"강원\",\n    \"충북\",\n    \"충남\",\n    \"전북\",\n    \"전남\",\n    \"경북\",\n    \"경남\",\n    \"제주\",\n    \"세종\",\n  ];\n  const educationOptions = [\n    \"고졸 미만\",\n    \"고교 재학\",\n    \"고졸 예정\",\n    \"고교 졸업\",\n    \"대학 재학\",\n    \"대졸 예정\",\n    \"대학 졸업\",\n    \"석∙박사\",\n    \"제한없음\",\n  ];\n  const jobStatusOptions = [\n    \"재직자\",\n    \"자영업자\",\n    \"미취업자\",\n    \"프리랜서\",\n    \"일용근로자\",\n    \"(예비)창업자\",\n    \"단기근로자\",\n    \"영농종사자\",\n    \"제한없음\",\n  ];\n\n  const [age, setAge] = useState(null);\n\n  // region, education, jobStatus 드롭다운 컴포넌트에서 선택된 옵션을 상태로 관리\n  const [selectedRegion, setSelectedRegion] = useState(null);\n  const [selectedEducation, setSelectedEducation] = useState(null);\n  const [selectedJobStatus, setSelectedJobStatus] = useState(null);\n\n  // \"선택완료\" 버튼이 활성화되는지 여부를 결정하는 변수\n  const isButtonDisabled =\n    !selectedRegion || !selectedEducation || !selectedJobStatus || !age;\n\n  //  Onboarding 컴포넌트에서 선택한 정보를 userData 상태로 저장\n  const [userData, setUserData] = useState({\n    region: \"\",\n    education: \"\",\n    jobStatus: \"\",\n    age: null,\n  });\n\n  // 버튼 클릭 : localStorage에 사용자 정보 저장 후 '홈' 페이지로 이동\n  const goToHome = () => {\n    // age 값을 userData에 저장\n    const updatedUserData = {\n      ...userData,\n      age: age,\n    };\n\n    // userData를 업데이트한 후 localStorage에 저장\n    localStorage.setItem(\"userInfo\", JSON.stringify(updatedUserData));\n\n    // navigate 이동\n    navigate(\"/Home\");\n  };\n\n  return (\n    <div className={styles.Onboarding}>\n      <div className={styles.logo_box} onClick={goToWelcome}>\n        <img src={logo} alt=\"logo\" className={styles.logo_img} />\n        <h3 className={styles.logo_text}>길JOB이</h3>\n      </div>\n      <div className={styles.wrapper}>\n        <div className={styles.Onboarding_container}>\n          <div className={styles.Onboarding_content}>\n            <div className={styles.Onboarding_line}>\n              <h4>지역</h4>\n              <Dropdown\n                options={regionOptions}\n                defaultOption=\"지역을 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedRegion(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    region: option,\n                  }));\n                }} // 옵션 선택 시 선택한 옵션을 상태로 업데이트\n              />\n            </div>\n            <div className={styles.Onboarding_line}>\n              <h4>학력</h4>\n              <Dropdown\n                options={educationOptions}\n                defaultOption=\"학력을 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedEducation(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    education: option,\n                  }));\n                }}\n              />\n            </div>\n            <div className={styles.Onboarding_line}>\n              <h4>구직 상태</h4>\n              <Dropdown\n                options={jobStatusOptions}\n                defaultOption=\"구직 상태를 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedJobStatus(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    jobStatus: option,\n                  }));\n                }}\n              />\n            </div>\n            <div\n              className={`${styles.Onboarding_line} ${styles.age_container}`}\n            >\n              <h4>연령</h4>\n              <div>\n                <input\n                  value={age === null ? \"\" : age} // null일 경우 빈 문자열로 표시\n                  onChange={(e) => {\n                    const value = e.target.value; // 입력 값\n                    if (/^\\d*$/.test(value)) {\n                      // 정규식으로 숫자인지 검사\n                      setAge(value);\n                    }\n                  }}\n                  placeholder=\"만\"\n                />\n                <span>세</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className={styles.wrapper_bottom}>\n          <button\n            className={`${styles.Onboarding_btn} ${\n              isButtonDisabled ? styles.disabled : \"\"\n            }`}\n            disabled={isButtonDisabled}\n            onClick={() => {\n              goToHome();\n            }}\n          >\n            선택완료\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Onboarding;\n","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/SearchResults.jsx",["89"],[],"import logo from \"../img/logo.png\";\nimport React, { useState } from \"react\";\nimport styles from \"./SearchResults.module.css\";\nimport AutoComplete from \"../component/AutoComplete\";\nimport Footer from \"../component/Footer\";\nimport { useNavigate } from \"react-router-dom\";\n\n// 24자 초과할 경우 ..으로 표시\nfunction cutText(text, maxLength) {\n  if (text.length > maxLength) {\n    return text.slice(0, maxLength) + \"..\";\n  }\n  return text;\n}\n\nfunction SearchResults() {\n  const options = [\"감자\", \"Apple\", \"Banana\", \"Orange\", \"Pineapple\", \"Grapes\"];\n  const navigate = useNavigate();\n\n  const goToHome = () => {\n    navigate(\"/Home\");\n  };\n\n  const goToDetailPage = () => {\n    navigate(\"/DetailPage\");\n  };\n\n  // 임시로 배열 & 검색결과로 만들어 봄\n  const card = [\n    \"청년전용창업자금(창업기반지원자금)\",\n    \"청년내일저축계좌\",\n    \"청년 자기개발 도서구입비 지원\",\n    \"예비창업패키지\",\n    \"청년키움식당\",\n    \"(창업성공패키지 지원사업)청년창업사관학교\",\n    \"아유 하기 싫어\",\n    \"이제는 더 이상 물러날 곳이 없다\",\n    \"니가먹고판단해남의말에휘둘리지말고나는니가줏대있게인생살았으면좋겠어남이맛있다고해도니가직접먹어보고판단해\",\n    \"정신차려 이 각박한 세상 속에서\",\n    \"자리로 돌아가줘\",\n    \"자 이게 클릭이야\",\n  ];\n\n  // 로컬 스토리지에 있던 검색 결과 꺼내오기(문자열로 저장해서 JSON 파싱 안해도 됨)\n  const searchText = localStorage.getItem(\"searchText\");\n\n  return (\n    <div className={styles.Home}>\n      <div className={styles.logo_box} onClick={goToHome}>\n        <img src={logo} alt=\"logo\" className={styles.logo_img} />\n        <h3 className={styles.logo_text}>길JOB이</h3>\n      </div>\n      <div className={styles.search}>\n        <AutoComplete options={options}></AutoComplete>\n      </div>\n      <div className={styles.SearchResults}>\n        <div className={styles.search_text}>\n          <h1>\n            <span>'{searchText}'</span> 검색 결과\n          </h1>\n        </div>\n        <div className={styles.card_box}>\n          {card.map((a) => (\n            <div key={a} className={styles.card} onClick={goToDetailPage}>\n              <div className={styles.card_text}>{cutText(a, 24)}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default SearchResults;\n","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/AutoComplete.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/Footer.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/ModalContent.jsx",["90","91"],[],"import Modal from \"react-modal\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport filter from \"../img/filter.png\";\r\nimport cancel from \"../img/cancel.png\";\r\nimport styles from \"./ModalContent.module.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst ModalContent = ({ openModal, closeModal }) => {\r\n  let navigate = useNavigate();\r\n\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  const handleModalOpen = () => {\r\n    setModalIsOpen(true);\r\n  };\r\n\r\n  const regionOptions = [\r\n    \"전체\",\r\n    \"서울\",\r\n    \"부산\",\r\n    \"대구\",\r\n    \"인천\",\r\n    \"광주\",\r\n    \"대전\",\r\n    \"울산\",\r\n    \"경기\",\r\n    \"강원\",\r\n    \"충북\",\r\n    \"충남\",\r\n    \"전북\",\r\n    \"전남\",\r\n    \"경북\",\r\n    \"경남\",\r\n    \"제주\",\r\n    \"세종\",\r\n  ];\r\n  const educationOptions = [\r\n    \"고졸 미만\",\r\n    \"고교 재학\",\r\n    \"고졸 예정\",\r\n    \"고교 졸업\",\r\n    \"대학 재학\",\r\n    \"대졸 예정\",\r\n    \"대학 졸업\",\r\n    \"석∙박사\",\r\n    \"제한없음\",\r\n  ];\r\n  const jobStatusOptions = [\r\n    \"재직자\",\r\n    \"자영업자\",\r\n    \"미취업자\",\r\n    \"프리랜서\",\r\n    \"일용근로자\",\r\n    \"(예비)창업자\",\r\n    \"단기근로자\",\r\n    \"영농종사자\",\r\n    \"제한없음\",\r\n  ];\r\n\r\n  const [age, setAge] = useState(null);\r\n  const [selectedRegion, setSelectedRegion] = useState(regionOptions[0]);\r\n  const [selectedEducation, setSelectedEducation] = useState(\r\n    educationOptions[0]\r\n  );\r\n  const [selectedJobStatus, setSelectedJobStatus] = useState(\r\n    jobStatusOptions[0]\r\n  );\r\n\r\n  // Modal이 열릴 때마다 저장된 사용자 정보를 가져와서 미리 설정\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    if (userInfo) {\r\n      setSelectedRegion(userInfo.region || regionOptions[0]);\r\n      setSelectedEducation(userInfo.education || educationOptions[0]);\r\n      setSelectedJobStatus(userInfo.jobStatus || jobStatusOptions[0]);\r\n      setAge(userInfo.age);\r\n    }\r\n  }, []);\r\n\r\n  //  Onboarding 컴포넌트에서 선택한 정보를 userData 상태로 저장(userData의 초기 값을 localStorage 정보로 교체!)\r\n  const [userData, setUserData] = useState({\r\n    region: selectedRegion,\r\n    education: selectedEducation,\r\n    jobStatus: selectedJobStatus,\r\n    age: age,\r\n  });\r\n\r\n  // 버튼 클릭 : localStorage에 사용자 정보 저장 후 '홈' 페이지로 이동\r\n  const goToHome = () => {\r\n    // age 값을 userData에 저장\r\n    const updatedUserData = {\r\n      ...userData,\r\n      age: age,\r\n    };\r\n\r\n    // userData를 업데이트한 후 localStorage에 저장\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(updatedUserData));\r\n\r\n    // navigate 이동\r\n    navigate(\"/Home\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        className={styles.filterbutton}\r\n        onClick={() => {\r\n          handleModalOpen();\r\n          openModal();\r\n        }}\r\n      >\r\n        <img src={filter} className={styles.filtericon} alt=\"filtericon\"></img>\r\n      </button>\r\n      <Modal\r\n        className={styles.modal}\r\n        isOpen={modalIsOpen}\r\n        onRequestClose={() => setModalIsOpen(false)}\r\n      >\r\n        <div className={styles.modalbody}>\r\n          <div className={styles.header}>\r\n            <div className={styles.headerleft}>\r\n              <img src={filter} className={styles.headericon}></img>\r\n              <span>필터</span>\r\n            </div>\r\n            <div className={styles.headerright}>\r\n              <button\r\n                className={styles.filterx}\r\n                onClick={() => {\r\n                  setModalIsOpen(false);\r\n                  closeModal();\r\n                }}\r\n              >\r\n                <img src={cancel} alt=\"cancel\"></img>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className={styles.content}>\r\n            <div className={styles.Onboarding_content}>\r\n              <div className={styles.Onboarding_line}>\r\n                <h4>지역</h4>\r\n                <Dropdown\r\n                  options={regionOptions}\r\n                  defaultOption=\"지역을 선택해주세요\"\r\n                  initialSelected={selectedRegion}\r\n                  onSelect={(option) => {\r\n                    setSelectedRegion(option);\r\n                    setUserData((prevUserData) => ({\r\n                      ...prevUserData,\r\n                      region: option,\r\n                    }));\r\n                  }} // 옵션 선택 시 선택한 옵션을 상태로 업데이트\r\n                />\r\n              </div>\r\n              <div className={styles.Onboarding_line}>\r\n                <h4>학력</h4>\r\n                <Dropdown\r\n                  options={educationOptions}\r\n                  defaultOption=\"학력을 선택해주세요\"\r\n                  initialSelected={selectedEducation}\r\n                  onSelect={(option) => {\r\n                    setSelectedEducation(option);\r\n                    setUserData((prevUserData) => ({\r\n                      ...prevUserData,\r\n                      education: option,\r\n                    }));\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className={styles.Onboarding_line}>\r\n                <h4>구직 상태</h4>\r\n                <Dropdown\r\n                  options={jobStatusOptions}\r\n                  defaultOption=\"구직 상태를 선택해주세요\"\r\n                  initialSelected={selectedJobStatus}\r\n                  onSelect={(option) => {\r\n                    setSelectedJobStatus(option);\r\n                    setUserData((prevUserData) => ({\r\n                      ...prevUserData,\r\n                      jobStatus: option,\r\n                    }));\r\n                  }}\r\n                />\r\n              </div>\r\n              <div\r\n                className={`${styles.Onboarding_line} ${styles.age_container}`}\r\n              >\r\n                <h4>연령</h4>\r\n                <div>\r\n                  <input\r\n                    value={age}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value; // 입력 값\r\n                      if (/^\\d*$/.test(value)) {\r\n                        // 정규식으로 숫자인지 검사\r\n                        setAge(value);\r\n                      }\r\n                    }}\r\n                    placeholder=\"만\"\r\n                  />\r\n                  <span>세</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={styles.wrapper_bottom}>\r\n            {/* 어차피 필터는 온보딩 등록된 후 -> 나이를 지우는 경우만 생각해서 비활성화 기능 만들었음 */}\r\n            <button\r\n              className={`${styles.Onboarding_btn} ${\r\n                !age ? styles.disabled : \"\"\r\n              }`}\r\n              disabled={!age}\r\n              onClick={() => {\r\n                setModalIsOpen(false);\r\n                closeModal();\r\n                goToHome();\r\n              }}\r\n            >\r\n              선택완료\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalContent;\r\n","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/giljob-e/src/component/Dropdown.jsx",[],[],{"ruleId":"92","severity":1,"message":"93","line":2,"column":8,"nodeType":"94","messageId":"95","endLine":2,"endColumn":12},{"ruleId":"92","severity":1,"message":"96","line":4,"column":20,"nodeType":"94","messageId":"95","endLine":4,"endColumn":29},{"ruleId":"92","severity":1,"message":"97","line":2,"column":17,"nodeType":"94","messageId":"95","endLine":2,"endColumn":25},{"ruleId":"98","severity":1,"message":"99","line":79,"column":6,"nodeType":"100","endLine":79,"endColumn":8,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":123,"column":15,"nodeType":"104","endLine":123,"endColumn":63},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'educationOptions', 'jobStatusOptions', and 'regionOptions'. Either include them or remove the dependency array.","ArrayExpression",["105"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"106","fix":"107"},"Update the dependencies array to be: [educationOptions, jobStatusOptions, regionOptions]",{"range":"108","text":"109"},[1783,1785],"[educationOptions, jobStatusOptions, regionOptions]"]