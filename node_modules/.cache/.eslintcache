[{"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/index.js":"1","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/App.js":"2","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/DetailPage.jsx":"3","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Welcome.jsx":"4","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Home.jsx":"5","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Onboarding.jsx":"6","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/SearchResults.jsx":"7","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ScrollToTop.jsx":"8","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Footer.jsx":"9","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ModalContent.jsx":"10","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/AutoComplete.jsx":"11","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Dropdown.jsx":"12"},{"size":419,"mtime":1692111580198,"results":"13","hashOfConfig":"14"},{"size":859,"mtime":1692112497233,"results":"15","hashOfConfig":"14"},{"size":3938,"mtime":1692113923912,"results":"16","hashOfConfig":"14"},{"size":925,"mtime":1692115569168,"results":"17","hashOfConfig":"14"},{"size":6320,"mtime":1692113941721,"results":"18","hashOfConfig":"14"},{"size":8034,"mtime":1692114709443,"results":"19","hashOfConfig":"14"},{"size":3842,"mtime":1692113898056,"results":"20","hashOfConfig":"14"},{"size":306,"mtime":1692094315000,"results":"21","hashOfConfig":"14"},{"size":663,"mtime":1692094315000,"results":"22","hashOfConfig":"14"},{"size":7828,"mtime":1692114733288,"results":"23","hashOfConfig":"14"},{"size":4276,"mtime":1692113900025,"results":"24","hashOfConfig":"14"},{"size":2475,"mtime":1692113901187,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gq00y1",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/index.js",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/App.js",[],[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/DetailPage.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Welcome.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Home.jsx",["65"],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Onboarding.jsx",["66","67"],[],"import styles from \"./Onboarding.module.css\";\nimport axios from \"axios\";\nimport logo from \"../img/logo.png\";\nimport Dropdown from \"../component/Dropdown\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction Onboarding() {\n  const navigate = useNavigate();\n  const [policyData, setPolicyData] = useState({ content: [] });\n\n  // input을 감싸는 div를 클릭했을 때 input으로 포커스 이동하게 하는 기능\n  const inputRef = useRef(null); // 입력란에 대한 ref 생성\n  const handleDivClick = () => {\n    inputRef.current.focus(); // 입력란에 포커스 이동\n  };\n\n  // 로고에 적용할 클릭 이벤트 함수\n  const goToWelcome = () => {\n    navigate(\"/\");\n  };\n\n  const regionOptions = [\n    \"전체\",\n    \"서울\",\n    \"경기\",\n    \"부산\",\n    \"대구\",\n    \"인천\",\n    \"광주\",\n    \"대전\",\n    \"울산\",\n    \"강원\",\n    \"충북\",\n    \"충남\",\n    \"전북\",\n    \"전남\",\n    \"경북\",\n    \"경남\",\n    \"세종\",\n    \"제주\",\n  ];\n  const educationOptions = [\n    \"고등학교 졸업 미만\",\n    \"고등학교 졸업\",\n    \"대학교 재학\",\n    \"대학교 졸업\",\n    \"석사/박사\",\n    \"무관\",\n  ];\n  const jobStatusOptions = [\n    \"전체\",\n    \"취업 준비생\",\n    \"(예비)창업자\",\n    \"재직자\",\n    \"자영업자\",\n    \"프리랜서\",\n    \"단기 근로자\",\n  ];\n\n  const [age, setAge] = useState(null);\n\n  // region, education, jobStatus 드롭다운 컴포넌트에서 선택된 옵션을 상태로 관리\n  const [selectedRegion, setSelectedRegion] = useState(null);\n  const [selectedEducation, setSelectedEducation] = useState(null);\n  const [selectedJobStatus, setSelectedJobStatus] = useState(null);\n\n  // \"선택완료\" 버튼이 활성화되는지 여부를 결정하는 변수\n  const isButtonDisabled =\n    !selectedRegion || !selectedEducation || !selectedJobStatus || !age;\n\n  //  Onboarding 컴포넌트에서 선택한 정보를 userData 상태로 저장\n  const [userData, setUserData] = useState({\n    region: \"\",\n    education: \"\",\n    jobStatus: \"\",\n    age: null,\n  });\n\n  // 버튼 클릭 : localStorage에 사용자 정보 저장 후 '홈' 페이지로 이동\n  const goToHome = async () => {\n    // age 값을 userData에 저장\n    const updatedUserData = {\n      ...userData,\n      age: age,\n    };\n\n    // userData를 업데이트한 후 localStorage에 저장\n    localStorage.setItem(\"userInfo\", JSON.stringify(updatedUserData));\n\n    try {\n      getData();\n      navigate(\"/Home\"); // 통신 성공하면 Home으로 이동\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const translationMap = {\n    전체: \"ALL\",\n    부산: \"BUSAN\",\n    충북: \"CHUNGBUK\",\n    충남: \"DAEGU\",\n    대구: \"DAEJEON\",\n    강원: \"GANGWON\",\n    광주: \"GWANGJU\",\n    경북: \"GYONGBUK\",\n    경남: \"GYEONGNAM\",\n    경기: \"GYOUNGGI\",\n    인천: \"INCHEON\",\n    제주: \"JEJU\",\n    전북: \"JEONBUK\",\n    전남: \"JEONNAM\",\n    세종: \"SEJONG\",\n    울산: \"ULSAN\",\n    서울: \"SEOUL\",\n    \"고등학교 졸업 미만\": \"UNDER_HIGH_SCHOOL\",\n    \"고등학교 졸업\": \"HIGH_SCHOOL_GRADUATE\",\n    \"대학교 재학\": \"COLLEGE_STUDENT\",\n    \"대학교 졸업\": \"COLLEGE_GRADUATE\",\n    \"석사/박사\": \"DOCTORATE\",\n    무관: \"ALL\",\n    \"취업 준비생\": \"JOB_SEEKER\",\n    \"(예비)창업자\": \"ENTREPRENEUR\",\n    재직자: \"EMPLOYEE\",\n    자영업자: \"SELF_EMPLOYED\",\n    프리랜서: \"FREELANCER\",\n    \"단기 근로자\": \"TEMPORARY_WORKER\",\n  };\n\n  // 맞춤 추천을 위한 API 요청 URL 생성\n  const constructApiUrl = (tmpData) => {\n    return `https://www.giljob-e.shop/api/policies?age=${tmpData.age}&education=${tmpData.education}&jobStatus=${tmpData.jobStatus}&pageNumber=0&pageSize=4&residence=${tmpData.region}`;\n  };\n\n  // API 호출 함수 정의\n  const fetchPolicies = (tmpData) => {\n    axios\n      .get(constructApiUrl(tmpData))\n      .then((res) => {\n        console.log(res);\n        setPolicyData(res.data);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // 로컬 스토리지에서 사용자 정보를 가져옴\n  const getData = () => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (userInfo) {\n      const tmpData = {\n        region: translationMap[userInfo.region],\n        education: translationMap[userInfo.education],\n        jobStatus: translationMap[userInfo.jobStatus],\n        age: parseInt(userInfo.age),\n      };\n      fetchPolicies(tmpData); //비동기 await~~해서 위에 로컬스토리지에서 받아온 객체 넣어줌\n    }\n  };\n\n  useEffect(getData, []);\n\n  return (\n    <div className={styles.Onboarding}>\n      <div className={styles.logo} onClick={goToWelcome}>\n        <img src={logo} alt=\"logo\" />\n      </div>\n      <div className={styles.wrapper}>\n        <div className={styles.Onboarding_container}>\n          <div className={styles.Onboarding_content}>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>지역</span>\n              <Dropdown\n                options={regionOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"지역을 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedRegion(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    region: option,\n                  }));\n                }} // 옵션 선택 시 선택한 옵션을 상태로 업데이트\n              />\n            </div>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>학력</span>\n              <Dropdown\n                options={educationOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"학력을 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedEducation(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    education: option,\n                  }));\n                }}\n              />\n            </div>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>구직 상태</span>\n              <Dropdown\n                options={jobStatusOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"구직 상태를 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedJobStatus(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    jobStatus: option,\n                  }));\n                }}\n              />\n            </div>\n            <div\n              className={`${styles.Onboarding_line} ${styles.age_container}`}\n            >\n              <span className={styles.bold}>연령</span>\n              <div className={styles.age_text} onClick={handleDivClick}>\n                <span>만</span>\n                <input\n                  ref={inputRef}\n                  value={age === null ? \"\" : age} // null일 경우 빈 문자열로 표시\n                  onChange={(e) => {\n                    const value = e.target.value; // 입력 값\n                    if (/^\\d*$/.test(value)) {\n                      // 정규식으로 숫자인지 검사\n                      setAge(value);\n                    }\n                  }}\n                />\n              </div>\n              <span className={styles.agefinish}>세</span>\n            </div>\n          </div>\n        </div>\n        <div className={styles.wrapper_bottom}>\n          <button\n            className={`${styles.Onboarding_btn} ${\n              isButtonDisabled ? styles.disabled : \"\"\n            }`}\n            disabled={isButtonDisabled}\n            onClick={() => {\n              goToHome();\n            }}\n          >\n            선택 완료\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Onboarding;\n",[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/SearchResults.jsx",["68"],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ScrollToTop.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Footer.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ModalContent.jsx",["69","70"],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/AutoComplete.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Dropdown.jsx",[],[],{"ruleId":"71","severity":1,"message":"72","line":136,"column":22,"nodeType":"73","endLine":136,"endColumn":24,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":10,"column":10,"nodeType":"77","messageId":"78","endLine":10,"endColumn":20},{"ruleId":"71","severity":1,"message":"72","line":162,"column":22,"nodeType":"73","endLine":162,"endColumn":24,"suggestions":"79"},{"ruleId":"71","severity":1,"message":"80","line":64,"column":6,"nodeType":"73","endLine":64,"endColumn":30,"suggestions":"81"},{"ruleId":"71","severity":1,"message":"82","line":82,"column":6,"nodeType":"73","endLine":82,"endColumn":8,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":130,"column":15,"nodeType":"86","endLine":130,"endColumn":63},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchPolicies' and 'translationMap'. Either include them or remove the dependency array.","ArrayExpression",["87"],"no-unused-vars","'policyData' is assigned a value but never used.","Identifier","unusedVar",["88"],"React Hook useEffect has a missing dependency: 'fetchPolicies'. Either include it or remove the dependency array.",["89"],"React Hook useEffect has missing dependencies: 'educationOptions', 'jobStatusOptions', 'regionOptions', and 'userInfo'. Either include them or remove the dependency array.",["90"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"91","fix":"92"},{"desc":"91","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [fetchPolicies, translationMap]",{"range":"98","text":"99"},{"range":"100","text":"99"},"Update the dependencies array to be: [searchText, activePage, fetchPolicies]",{"range":"101","text":"102"},"Update the dependencies array to be: [educationOptions, jobStatusOptions, regionOptions, userInfo]",{"range":"103","text":"104"},[3665,3667],"[fetchPolicies, translationMap]",[3802,3804],[1821,1845],"[searchText, activePage, fetchPolicies]",[1882,1884],"[educationOptions, jobStatusOptions, regionOptions, userInfo]"]