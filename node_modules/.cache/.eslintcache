[{"/Users/yueun-oh/Desktop/길JOB이/src/index.js":"1","/Users/yueun-oh/Desktop/길JOB이/src/App.js":"2","/Users/yueun-oh/Desktop/길JOB이/src/pages/Welcome.jsx":"3","/Users/yueun-oh/Desktop/길JOB이/src/pages/Onboarding.jsx":"4","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/index.js":"5","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/App.js":"6","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/DetailPage.jsx":"7","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Welcome.jsx":"8","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Home.jsx":"9","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Onboarding.jsx":"10","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/SearchResults.jsx":"11","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ScrollToTop.jsx":"12","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Footer.jsx":"13","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ModalContent.jsx":"14","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/AutoComplete.jsx":"15","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Dropdown.jsx":"16"},{"size":467,"mtime":1691100377546,"results":"17","hashOfConfig":"18"},{"size":454,"mtime":1691161672159,"results":"19","hashOfConfig":"18"},{"size":923,"mtime":1691166103107,"results":"20","hashOfConfig":"18"},{"size":172,"mtime":1691165777646,"results":"21","hashOfConfig":"18"},{"size":468,"mtime":1691722942000,"results":"22","hashOfConfig":"23"},{"size":852,"mtime":1691836434509,"results":"24","hashOfConfig":"23"},{"size":1173,"mtime":1691734696000,"results":"25","hashOfConfig":"23"},{"size":925,"mtime":1691739860000,"results":"26","hashOfConfig":"23"},{"size":6465,"mtime":1692003255579,"results":"27","hashOfConfig":"23"},{"size":5865,"mtime":1691836382764,"results":"28","hashOfConfig":"23"},{"size":3642,"mtime":1691999157022,"results":"29","hashOfConfig":"23"},{"size":306,"mtime":1691722942000,"results":"30","hashOfConfig":"23"},{"size":686,"mtime":1691722942000,"results":"31","hashOfConfig":"23"},{"size":8036,"mtime":1691888423181,"results":"32","hashOfConfig":"23"},{"size":3451,"mtime":1691999281210,"results":"33","hashOfConfig":"23"},{"size":2475,"mtime":1691722942000,"results":"34","hashOfConfig":"23"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"tygnch",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"gq00y1",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"51"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"51"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"/Users/yueun-oh/Desktop/길JOB이/src/index.js",[],[],[],"/Users/yueun-oh/Desktop/길JOB이/src/App.js",[],[],"/Users/yueun-oh/Desktop/길JOB이/src/pages/Welcome.jsx",[],[],"/Users/yueun-oh/Desktop/길JOB이/src/pages/Onboarding.jsx",["87"],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/index.js",[],[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/App.js",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/DetailPage.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Welcome.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Home.jsx",["88","89"],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/pages/Onboarding.jsx",["90"],[],"import styles from \"./Onboarding.module.css\";\nimport logo from \"../img/logo.png\";\nimport Dropdown from \"../component/Dropdown\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction Onboarding() {\n  let navigate = useNavigate();\n\n  // input을 감싸는 div를 클릭했을 때 input으로 포커스 이동하게 하는 기능\n  const inputRef = useRef(null); // 입력란에 대한 ref 생성\n  const handleDivClick = () => {\n    inputRef.current.focus(); // 입력란에 포커스 이동\n  };\n\n  // 로고에 적용할 클릭 이벤트 함수\n  const goToWelcome = () => {\n    navigate(\"/\");\n  };\n\n  const regionOptions = [\n    \"전체\",\n    \"서울\",\n    \"경기\",\n    \"부산\",\n    \"대구\",\n    \"인천\",\n    \"광주\",\n    \"대전\",\n    \"울산\",\n    \"강원\",\n    \"충북\",\n    \"충남\",\n    \"전북\",\n    \"전남\",\n    \"경북\",\n    \"경남\",\n    \"세종\",\n    \"제주\",\n  ];\n  const educationOptions = [\n    \"고등학교 졸업 미만\",\n    \"고등학교 졸업\",\n    \"대학교 재학\",\n    \"대학교 졸업\",\n    \"석사/박사\",\n    \"무관\",\n  ];\n  const jobStatusOptions = [\n    \"전체\",\n    \"취업 준비생\",\n    \"(예비)창업자\",\n    \"재직자\",\n    \"자영업자\",\n    \"프리랜서\",\n    \"단기 근로자\",\n  ];\n\n  const [age, setAge] = useState(null);\n\n  // region, education, jobStatus 드롭다운 컴포넌트에서 선택된 옵션을 상태로 관리\n  const [selectedRegion, setSelectedRegion] = useState(null);\n  const [selectedEducation, setSelectedEducation] = useState(null);\n  const [selectedJobStatus, setSelectedJobStatus] = useState(null);\n\n  // \"선택완료\" 버튼이 활성화되는지 여부를 결정하는 변수\n  const isButtonDisabled =\n    !selectedRegion || !selectedEducation || !selectedJobStatus || !age;\n\n  //  Onboarding 컴포넌트에서 선택한 정보를 userData 상태로 저장\n  const [userData, setUserData] = useState({\n    region: \"\",\n    education: \"\",\n    jobStatus: \"\",\n    age: null,\n  });\n\n  // 버튼 클릭 : localStorage에 사용자 정보 저장 후 '홈' 페이지로 이동\n  const goToHome = () => {\n    // age 값을 userData에 저장\n    const updatedUserData = {\n      ...userData,\n      age: age,\n    };\n\n    // userData를 업데이트한 후 localStorage에 저장\n    localStorage.setItem(\"userInfo\", JSON.stringify(updatedUserData));\n\n    // navigate 이동\n    navigate(\"/Home\");\n  };\n\n  return (\n    <div className={styles.Onboarding}>\n      <div className={styles.logo} onClick={goToWelcome}>\n        <img src={logo} alt=\"logo\" />\n      </div>\n      <div className={styles.wrapper}>\n        <div className={styles.Onboarding_container}>\n          <div className={styles.Onboarding_content}>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>지역</span>\n              <Dropdown\n                options={regionOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"지역을 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedRegion(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    region: option,\n                  }));\n                }} // 옵션 선택 시 선택한 옵션을 상태로 업데이트\n              />\n            </div>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>학력</span>\n              <Dropdown\n                options={educationOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"학력을 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedEducation(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    education: option,\n                  }));\n                }}\n              />\n            </div>\n            <div className={styles.Onboarding_line}>\n              <span className={styles.bold}>구직 상태</span>\n              <Dropdown\n                options={jobStatusOptions}\n                className={styles.Onboarding_dropdown}\n                defaultOption=\"구직 상태를 선택해주세요\"\n                onSelect={(option) => {\n                  setSelectedJobStatus(option);\n                  setUserData((prevUserData) => ({\n                    ...prevUserData,\n                    jobStatus: option,\n                  }));\n                }}\n              />\n            </div>\n            <div\n              className={`${styles.Onboarding_line} ${styles.age_container}`}\n            >\n              <span className={styles.bold}>연령</span>\n              <div className={styles.age_text} onClick={handleDivClick}>\n                <span>만</span>\n                <input\n                  ref={inputRef}\n                  value={age === null ? \"\" : age} // null일 경우 빈 문자열로 표시\n                  onChange={(e) => {\n                    const value = e.target.value; // 입력 값\n                    if (/^\\d*$/.test(value)) {\n                      // 정규식으로 숫자인지 검사\n                      setAge(value);\n                    }\n                  }}\n                />\n              </div>\n              <span className={styles.agefinish}>세</span>\n            </div>\n          </div>\n        </div>\n        <div className={styles.wrapper_bottom}>\n          <button\n            className={`${styles.Onboarding_btn} ${\n              isButtonDisabled ? styles.disabled : \"\"\n            }`}\n            disabled={isButtonDisabled}\n            onClick={() => {\n              goToHome();\n            }}\n          >\n            선택 완료\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Onboarding;\n","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/SearchResults.jsx",["91"],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ScrollToTop.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Footer.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/ModalContent.jsx",["92","93"],[],"import Modal from \"react-modal\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport filter from \"../img/filter.png\";\r\nimport cancel from \"../img/cancel.png\";\r\nimport styles from \"./ModalContent.module.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst ModalContent = ({ openModal, closeModal }) => {\r\n  let navigate = useNavigate();\r\n\r\n  // input을 감싸는 div를 클릭했을 때 input으로 포커스 이동하게 하는 기능\r\n  const inputRef = useRef(null); // 입력란에 대한 ref 생성\r\n  const handleDivClick = () => {\r\n    inputRef.current.focus(); // 입력란에 포커스 이동\r\n  };\r\n\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  const handleModalOpen = () => {\r\n    setModalIsOpen(true);\r\n  };\r\n\r\n  const regionOptions = [\r\n    \"전체\",\r\n    \"서울\",\r\n    \"경기\",\r\n    \"부산\",\r\n    \"대구\",\r\n    \"인천\",\r\n    \"광주\",\r\n    \"대전\",\r\n    \"울산\",\r\n    \"강원\",\r\n    \"충북\",\r\n    \"충남\",\r\n    \"전북\",\r\n    \"전남\",\r\n    \"경북\",\r\n    \"경남\",\r\n    \"세종\",\r\n    \"제주\",\r\n  ];\r\n  const educationOptions = [\r\n    \"고등학교 졸업 미만\",\r\n    \"고등학교 졸업\",\r\n    \"대학교 재학\",\r\n    \"대학교 졸업\",\r\n    \"석사/박사\",\r\n    \"무관\",\r\n  ];\r\n  const jobStatusOptions = [\r\n    \"전체\",\r\n    \"취업 준비생\",\r\n    \"(예비)창업자\",\r\n    \"재직자\",\r\n    \"자영업자\",\r\n    \"프리랜서\",\r\n    \"단기 근로자\",\r\n  ];\r\n\r\n  const [age, setAge] = useState(null);\r\n  const [selectedRegion, setSelectedRegion] = useState(regionOptions[0]);\r\n  const [selectedEducation, setSelectedEducation] = useState(\r\n    educationOptions[0]\r\n  );\r\n  const [selectedJobStatus, setSelectedJobStatus] = useState(\r\n    jobStatusOptions[0]\r\n  );\r\n\r\n  // 로컬 스토리지에서 사용자 정보를 가져옴\r\n  const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      // Modal이 열릴 때마다 저장된 사용자 정보를 가져와서 미리 설정\r\n      setSelectedRegion(userInfo.region || regionOptions[0]);\r\n      setSelectedEducation(userInfo.education || educationOptions[0]);\r\n      setSelectedJobStatus(userInfo.jobStatus || jobStatusOptions[0]);\r\n      setAge(userInfo.age);\r\n    }\r\n  }, []);\r\n\r\n  //  Onboarding 컴포넌트에서 선택한 정보를 userData 상태로 저장(userData의 초기 값을 localStorage 정보로 교체!)\r\n  const [userData, setUserData] = useState({\r\n    region: selectedRegion,\r\n    education: selectedEducation,\r\n    jobStatus: selectedJobStatus,\r\n    age: age,\r\n  });\r\n\r\n  // 버튼 클릭 : localStorage에 사용자 정보 저장 후 '홈' 페이지로 이동\r\n  const goToHome = () => {\r\n    // age 값을 userData에 저장\r\n    const updatedUserData = {\r\n      ...userData,\r\n      age: age,\r\n    };\r\n\r\n    // userData를 업데이트한 후 localStorage에 저장\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(updatedUserData));\r\n\r\n    // navigate 이동\r\n    navigate(\"/Home\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        className={styles.filterbutton}\r\n        onClick={() => {\r\n          handleModalOpen();\r\n          openModal();\r\n        }}\r\n      >\r\n        <img src={filter} className={styles.filtericon} alt=\"filtericon\"></img>\r\n      </button>\r\n      <Modal\r\n        className={styles.modal}\r\n        isOpen={modalIsOpen}\r\n        onRequestClose={() => setModalIsOpen(false)}\r\n      >\r\n        <div className={styles.modalbody}>\r\n          <div className={styles.header}>\r\n            <div className={styles.headerleft}>\r\n              <img src={filter} className={styles.headericon}></img>\r\n              <span>필터</span>\r\n            </div>\r\n            <div className={styles.headerright}>\r\n              <button\r\n                className={styles.filterx}\r\n                onClick={() => {\r\n                  setModalIsOpen(false);\r\n                  closeModal();\r\n                }}\r\n              >\r\n                <img src={cancel} alt=\"cancel\"></img>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className={styles.content}>\r\n            <div className={styles.Onboarding_content}>\r\n              <div className={styles.Onboarding_line}>\r\n                <span className={styles.bold}>지역</span>\r\n                <Dropdown\r\n                  options={regionOptions}\r\n                  className={styles.Onboarding_dropdown}\r\n                  defaultOption=\"지역을 선택해주세요\"\r\n                  initialSelected={selectedRegion} // 초기 선택 값 전달\r\n                  onSelect={(option) => {\r\n                    setSelectedRegion(option);\r\n                    setUserData((prevUserData) => ({\r\n                      ...prevUserData,\r\n                      region: option,\r\n                    }));\r\n                  }} // 옵션 선택 시 선택한 옵션을 상태로 업데이트\r\n                />\r\n              </div>\r\n              <div className={styles.Onboarding_line}>\r\n                <span className={styles.bold}>학력</span>\r\n                <Dropdown\r\n                  options={educationOptions}\r\n                  className={styles.Onboarding_dropdown}\r\n                  defaultOption=\"학력을 선택해주세요\"\r\n                  initialSelected={selectedEducation} // 초기 선택 값 전달\r\n                  onSelect={(option) => {\r\n                    setSelectedEducation(option);\r\n                    setUserData((prevUserData) => ({\r\n                      ...prevUserData,\r\n                      education: option,\r\n                    }));\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className={styles.Onboarding_line}>\r\n                <span className={styles.bold}>구직 상태</span>\r\n                <Dropdown\r\n                  options={jobStatusOptions}\r\n                  className={styles.Onboarding_dropdown}\r\n                  defaultOption=\"구직 상태를 선택해주세요\"\r\n                  initialSelected={selectedJobStatus} // 초기 선택 값 전달\r\n                  onSelect={(option) => {\r\n                    setSelectedJobStatus(option);\r\n                    setUserData((prevUserData) => ({\r\n                      ...prevUserData,\r\n                      jobStatus: option,\r\n                    }));\r\n                  }}\r\n                />\r\n              </div>\r\n              <div\r\n                className={`${styles.Onboarding_line} ${styles.age_container}`}\r\n              >\r\n                <span className={styles.bold}>연령</span>\r\n                <div className={styles.age_text} onClick={handleDivClick}>\r\n                  <span>만</span>\r\n                  <input\r\n                    ref={inputRef}\r\n                    value={age === null ? \"\" : age} // null일 경우 빈 문자열로 표시\r\n                    onChange={(e) => {\r\n                      const value = e.target.value; // 입력 값\r\n                      if (/^\\d*$/.test(value)) {\r\n                        // 정규식으로 숫자인지 검사\r\n                        setAge(value);\r\n                      }\r\n                    }}\r\n                  />\r\n                </div>\r\n                <span className={styles.agefinish}>세</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={styles.wrapper_bottom}>\r\n            {/* 어차피 필터는 온보딩 등록된 후 -> 나이를 지우는 경우만 생각해서 비활성화 기능 만들었음 */}\r\n            <button\r\n              className={`${styles.Onboarding_btn} ${\r\n                !age ? styles.disabled : \"\"\r\n              }`}\r\n              disabled={!age}\r\n              onClick={() => {\r\n                setModalIsOpen(false);\r\n                closeModal();\r\n                goToHome();\r\n              }}\r\n            >\r\n              선택 완료\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalContent;\r\n","/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/AutoComplete.jsx",[],[],"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/Dropdown.jsx",[],[],{"ruleId":"94","severity":1,"message":"95","line":2,"column":8,"nodeType":"96","messageId":"97","endLine":2,"endColumn":12},{"ruleId":"98","severity":1,"message":"99","line":108,"column":6,"nodeType":"100","endLine":108,"endColumn":16,"suggestions":"101"},{"ruleId":"98","severity":1,"message":"102","line":133,"column":6,"nodeType":"100","endLine":133,"endColumn":22,"suggestions":"103"},{"ruleId":"94","severity":1,"message":"104","line":4,"column":20,"nodeType":"96","messageId":"97","endLine":4,"endColumn":29},{"ruleId":"98","severity":1,"message":"105","line":62,"column":6,"nodeType":"100","endLine":62,"endColumn":30,"suggestions":"106"},{"ruleId":"98","severity":1,"message":"107","line":82,"column":6,"nodeType":"100","endLine":82,"endColumn":8,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":126,"column":15,"nodeType":"111","endLine":126,"endColumn":63},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'translationMap'. Either include it or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has missing dependencies: 'fetchPolicies' and 'userInfo'. Either include them or remove the dependency array.",["113"],"'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchPolicies'. Either include it or remove the dependency array.",["114"],"React Hook useEffect has missing dependencies: 'educationOptions', 'jobStatusOptions', 'regionOptions', and 'userInfo'. Either include them or remove the dependency array.",["115"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [translationMap, userInfo]",{"range":"124","text":"125"},"Update the dependencies array to be: [fetchPolicies, translatedData, userInfo]",{"range":"126","text":"127"},"Update the dependencies array to be: [searchText, activePage, fetchPolicies]",{"range":"128","text":"129"},"Update the dependencies array to be: [educationOptions, jobStatusOptions, regionOptions, userInfo]",{"range":"130","text":"131"},[2788,2798],"[translationMap, userInfo]",[3617,3633],"[fetchPolicies, translatedData, userInfo]",[1742,1766],"[searchText, activePage, fetchPolicies]",[1954,1956],"[educationOptions, jobStatusOptions, regionOptions, userInfo]"]