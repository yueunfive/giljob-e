{"ast":null,"code":"var _jsxFileName = \"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/SearchResults.jsx\",\n  _s = $RefreshSig$();\nimport logo from \"../img/logo.png\";\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./SearchResults.module.css\";\nimport AutoComplete from \"../component/AutoComplete\";\nimport Footer from \"../component/Footer\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Pagination from \"react-js-pagination\";\n\n// 24자 초과할 경우 ..으로 표시\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction cutText(text, maxLength) {\n  if (text.length > maxLength) {\n    return text.slice(0, maxLength) + \"..\";\n  }\n  return text;\n}\nfunction SearchResults() {\n  _s();\n  const navigate = useNavigate();\n\n  // 이전에 보던 페이지 번호를 저장할 상태\n  const [lastPageVisited, setLastPageVisited] = useState(1);\n  const [visitedPages, setVisitedPages] = useState([1]); // 이전에 방문한 페이지 번호를 저장하는 상태\n\n  const goToHome = () => {\n    navigate(\"/Home\");\n  };\n\n  // 정책 상세 페이지로 이동\n  const goToDetailPage = bizId => {\n    // 현재 페이지 번호 저장\n    setLastPageVisited(activePage);\n    // 해당 정책의 bizid를 사용하여 DetailPage로 이동\n    navigate(`/DetailPage/${bizId}`);\n  };\n  const [policyData, setPolicyData] = useState({\n    content: []\n  }); //  API 응답 데이터를 관리하는 상태 추가\n  const [activePage, setActivePage] = useState(1); // 현재 선택된 페이지 번호 상태 추가\n  const itemsPerPage = 12; // 한 페이지당 보여줄 아이템 개수\n\n  // 로컬 스토리지에 있던 검색 결과 꺼내오기(문자열로 저장해서 JSON 파싱 안해도 됨)\n  const searchText = localStorage.getItem(\"searchText\");\n\n  // 검색 결과를 위한 API 요청 URL 생성\n  const constructApiUrl = () => {\n    return `https://www.giljob-e.shop/api/policies?keyword=${searchText}&pageNumber=${activePage - 1}&pageSize=${itemsPerPage}`;\n  };\n\n  // API 호출 함수 정의\n  const fetchPolicies = async () => {\n    try {\n      const apiUrl = constructApiUrl();\n      const response = await axios.get(apiUrl); // API 요청\n\n      setPolicyData(response.data); // policyData 업데이트\n      console.log(\"searchText:\", searchText);\n      console.log(constructApiUrl());\n    } catch (error) {\n      console.error(\"Error fetching policies:\", error);\n    }\n  };\n\n  // searchText가 변경될 때에만 API를 호출\n  useEffect(() => {\n    if (searchText) {\n      if (activePage === 1) {\n        setActivePage(lastPageVisited);\n      }\n      fetchPolicies(); // API 호출\n    }\n  }, [searchText, lastPageVisited, activePage]);\n\n  // 뒤로 가기를 눌렀을 때 이전 페이지 번호를 확인하고 설정\n  useEffect(() => {\n    window.onpopstate = event => {\n      if (event.state) {\n        setActivePage(event.state.page);\n        setLastPageVisited(event.state.page);\n      }\n    };\n  }, []);\n\n  // // 페이지 번호 변경 시 호출되는 함수(안 쓰길래 일단 주석처리)\n  // const handlePageChange = (pageNumber) => {\n  //   setActivePage(pageNumber);\n\n  //   if (!visitedPages.includes(pageNumber)) {\n  //     setVisitedPages([...visitedPages, pageNumber]);\n  //   }\n\n  //   // 브라우저 히스토리에 현재 페이지 정보를 저장\n  //   window.history.pushState({ page: pageNumber }, \"\", \"\");\n  //   setLastPageVisited(pageNumber);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.Home,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.logo,\n      onClick: goToHome,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.search,\n      children: /*#__PURE__*/_jsxDEV(AutoComplete, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.SearchResults,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.search_text,\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"'\", cutText(searchText, 27), \"'\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), \" \\uAC80\\uC0C9 \\uACB0\\uACFC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.card_box,\n        children: policyData.content.map((policy, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.card,\n          onClick: () => goToDetailPage(policy.bizId),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.card_text,\n            children: cutText(policy.name, 24)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      activePage: activePage // 현재 활성화된 페이지 번호\n      ,\n      itemsCountPerPage: itemsPerPage // 페이지당 보여줄 아이템 개수\n      ,\n      totalItemsCount: policyData.totalElements // 전체 아이템 개수로 변경\n      ,\n      pageRangeDisplayed: 5 // 페이지 번호 버튼의 범위 (양 옆으로 몇 개의 페이지 번호를 보여줄지)\n      ,\n      prevPageText: \"<\",\n      nextPageText: \">\",\n      hideFirstLastPages: true /* 맨 앞과 끝 페이지 버튼이 숨겨짐 */,\n      onChange: pageNumber => {\n        if (pageNumber !== lastPageVisited) {\n          window.history.pushState({\n            page: pageNumber\n          }, \"\", \"\"); // 현재 페이지 번호와 이전에 보던 페이지 번호가 다른 경우 브라우저 히스토리에 페이지 정보를 저장\n          setLastPageVisited(pageNumber);\n        }\n        setActivePage(pageNumber);\n      } // 페이지 번호 변경 시 호출되는 함수\n      ,\n      activeClass: styles.custom_active // 활성화된 페이지 스타일\n      ,\n      itemClass: styles.custom_page_item // 페이지 아이템 스타일\n      ,\n      linkClass: styles.custom_page_link // 페이지 링크 스타일\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchResults, \"seomPE1lZy4O7PCODq8bxsSlOUo=\", false, function () {\n  return [useNavigate];\n});\n_c = SearchResults;\nexport default SearchResults;\nvar _c;\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"names":["logo","React","useState","useEffect","styles","AutoComplete","Footer","useNavigate","axios","Pagination","jsxDEV","_jsxDEV","cutText","text","maxLength","length","slice","SearchResults","_s","navigate","lastPageVisited","setLastPageVisited","visitedPages","setVisitedPages","goToHome","goToDetailPage","bizId","activePage","policyData","setPolicyData","content","setActivePage","itemsPerPage","searchText","localStorage","getItem","constructApiUrl","fetchPolicies","apiUrl","response","get","data","console","log","error","window","onpopstate","event","state","page","className","Home","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","search","search_text","card_box","map","policy","index","card","card_text","name","itemsCountPerPage","totalItemsCount","totalElements","pageRangeDisplayed","prevPageText","nextPageText","hideFirstLastPages","onChange","pageNumber","history","pushState","activeClass","custom_active","itemClass","custom_page_item","linkClass","custom_page_link","_c","$RefreshReg$"],"sources":["/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/src/component/SearchResults.jsx"],"sourcesContent":["import logo from \"../img/logo.png\";\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./SearchResults.module.css\";\nimport AutoComplete from \"../component/AutoComplete\";\nimport Footer from \"../component/Footer\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Pagination from \"react-js-pagination\";\n\n// 24자 초과할 경우 ..으로 표시\nfunction cutText(text, maxLength) {\n  if (text.length > maxLength) {\n    return text.slice(0, maxLength) + \"..\";\n  }\n  return text;\n}\n\nfunction SearchResults() {\n  const navigate = useNavigate();\n\n  // 이전에 보던 페이지 번호를 저장할 상태\n  const [lastPageVisited, setLastPageVisited] = useState(1);\n  const [visitedPages, setVisitedPages] = useState([1]); // 이전에 방문한 페이지 번호를 저장하는 상태\n\n  const goToHome = () => {\n    navigate(\"/Home\");\n  };\n\n  // 정책 상세 페이지로 이동\n  const goToDetailPage = (bizId) => {\n    // 현재 페이지 번호 저장\n    setLastPageVisited(activePage);\n    // 해당 정책의 bizid를 사용하여 DetailPage로 이동\n    navigate(`/DetailPage/${bizId}`);\n  };\n\n  const [policyData, setPolicyData] = useState({ content: [] }); //  API 응답 데이터를 관리하는 상태 추가\n  const [activePage, setActivePage] = useState(1); // 현재 선택된 페이지 번호 상태 추가\n  const itemsPerPage = 12; // 한 페이지당 보여줄 아이템 개수\n\n  // 로컬 스토리지에 있던 검색 결과 꺼내오기(문자열로 저장해서 JSON 파싱 안해도 됨)\n  const searchText = localStorage.getItem(\"searchText\");\n\n  // 검색 결과를 위한 API 요청 URL 생성\n  const constructApiUrl = () => {\n    return `https://www.giljob-e.shop/api/policies?keyword=${searchText}&pageNumber=${\n      activePage - 1\n    }&pageSize=${itemsPerPage}`;\n  };\n\n  // API 호출 함수 정의\n  const fetchPolicies = async () => {\n    try {\n      const apiUrl = constructApiUrl();\n      const response = await axios.get(apiUrl); // API 요청\n\n      setPolicyData(response.data); // policyData 업데이트\n      console.log(\"searchText:\", searchText);\n      console.log(constructApiUrl());\n    } catch (error) {\n      console.error(\"Error fetching policies:\", error);\n    }\n  };\n\n  // searchText가 변경될 때에만 API를 호출\n  useEffect(() => {\n    if (searchText) {\n      if (activePage === 1) {\n        setActivePage(lastPageVisited);\n      }\n      fetchPolicies(); // API 호출\n    }\n  }, [searchText, lastPageVisited, activePage]);\n\n  // 뒤로 가기를 눌렀을 때 이전 페이지 번호를 확인하고 설정\n  useEffect(() => {\n    window.onpopstate = (event) => {\n      if (event.state) {\n        setActivePage(event.state.page);\n        setLastPageVisited(event.state.page);\n      }\n    };\n  }, []);\n\n  // // 페이지 번호 변경 시 호출되는 함수(안 쓰길래 일단 주석처리)\n  // const handlePageChange = (pageNumber) => {\n  //   setActivePage(pageNumber);\n\n  //   if (!visitedPages.includes(pageNumber)) {\n  //     setVisitedPages([...visitedPages, pageNumber]);\n  //   }\n\n  //   // 브라우저 히스토리에 현재 페이지 정보를 저장\n  //   window.history.pushState({ page: pageNumber }, \"\", \"\");\n  //   setLastPageVisited(pageNumber);\n  // };\n\n  return (\n    <div className={styles.Home}>\n      <div className={styles.logo} onClick={goToHome}>\n        <img src={logo} alt=\"logo\" />\n      </div>\n      <div className={styles.search}>\n        <AutoComplete />\n      </div>\n      <div className={styles.SearchResults}>\n        <div className={styles.search_text}>\n          <h1>\n            <span>'{cutText(searchText, 27)}'</span> 검색 결과\n          </h1>\n        </div>\n        <div className={styles.card_box}>\n          {policyData.content.map((policy, index) => (\n            <div\n              key={index}\n              className={styles.card}\n              onClick={() => goToDetailPage(policy.bizId)}\n            >\n              <div className={styles.card_text}>{cutText(policy.name, 24)}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <Pagination\n        activePage={activePage} // 현재 활성화된 페이지 번호\n        itemsCountPerPage={itemsPerPage} // 페이지당 보여줄 아이템 개수\n        totalItemsCount={policyData.totalElements} // 전체 아이템 개수로 변경\n        pageRangeDisplayed={5} // 페이지 번호 버튼의 범위 (양 옆으로 몇 개의 페이지 번호를 보여줄지)\n        prevPageText=\"<\"\n        nextPageText=\">\"\n        hideFirstLastPages={true} /* 맨 앞과 끝 페이지 버튼이 숨겨짐 */\n        onChange={(pageNumber) => {\n          if (pageNumber !== lastPageVisited) {\n            window.history.pushState({ page: pageNumber }, \"\", \"\"); // 현재 페이지 번호와 이전에 보던 페이지 번호가 다른 경우 브라우저 히스토리에 페이지 정보를 저장\n            setLastPageVisited(pageNumber);\n          }\n          setActivePage(pageNumber);\n        }} // 페이지 번호 변경 시 호출되는 함수\n        activeClass={styles.custom_active} // 활성화된 페이지 스타일\n        itemClass={styles.custom_page_item} // 페이지 아이템 스타일\n        linkClass={styles.custom_page_link} // 페이지 링크 스타일\n      />\n      <Footer />\n    </div>\n  );\n}\n\nexport default SearchResults;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}