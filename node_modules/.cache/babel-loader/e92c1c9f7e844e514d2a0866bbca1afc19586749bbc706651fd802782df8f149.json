{"ast":null,"code":"var _jsxFileName = \"/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/\\u1100\\u1175\\u11AFJOB\\u110B\\u1175/src/component/Dropdown.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport styles from \"./Dropdown.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dropdown() {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(\"지역을 선택해 주세요\");\n  const options = [\"전체\", \"서울\", \"경기\", \"부산\", \"대구\", \"인천\"]; // 드롭다운 박스의 옵션들을 배열로 정의\n\n  // 드롭다운 버튼을 클릭했을 때 호출되는 함수\n  const handleDropdownClick = () => {\n    setIsOpen(!isOpen); // isOpen 상태를 토글하여 드롭다운 내용을 보이거나 숨김\n  };\n\n  // 드롭다운 내용의 각 옵션을 클릭했을 때 호출되는 함수\n  const handleOptionClick = option => {\n    setSelectedOption(option); // 선택된 옵션을 selectedOption 상태로 설정\n    setIsOpen(false); // 드롭다운 내용을 숨김\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.dropdown_container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `${styles.drop_btn} ${isOpen ? styles.active : \"\"}`,\n      onClick: handleDropdownClick,\n      children: selectedOption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.dropdown_content,\n      children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.option,\n        onClick: () => handleOptionClick(option),\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(Dropdown, \"+fe0RyqqOf8bVnNOtVewPUcyyqk=\");\n_c = Dropdown;\nexport default Dropdown;\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["React","useState","styles","jsxDEV","_jsxDEV","Dropdown","_s","isOpen","setIsOpen","selectedOption","setSelectedOption","options","handleDropdownClick","handleOptionClick","option","className","dropdown_container","children","drop_btn","active","onClick","fileName","_jsxFileName","lineNumber","columnNumber","dropdown_content","map","index","_c","$RefreshReg$"],"sources":["/Users/yueun-oh/Desktop/yueunfive-git/likelion-hackathon/길JOB이/src/component/Dropdown.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./Dropdown.module.css\";\n\nfunction Dropdown() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const [selectedOption, setSelectedOption] = useState(\"지역을 선택해 주세요\");\n\n  const options = [\"전체\", \"서울\", \"경기\", \"부산\", \"대구\", \"인천\"]; // 드롭다운 박스의 옵션들을 배열로 정의\n\n  // 드롭다운 버튼을 클릭했을 때 호출되는 함수\n  const handleDropdownClick = () => {\n    setIsOpen(!isOpen); // isOpen 상태를 토글하여 드롭다운 내용을 보이거나 숨김\n  };\n\n  // 드롭다운 내용의 각 옵션을 클릭했을 때 호출되는 함수\n  const handleOptionClick = (option) => {\n    setSelectedOption(option); // 선택된 옵션을 selectedOption 상태로 설정\n    setIsOpen(false); // 드롭다운 내용을 숨김\n  };\n\n  return (\n    <div className={styles.dropdown_container}>\n      <button\n        className={`${styles.drop_btn} ${isOpen ? styles.active : \"\"}`}\n        onClick={handleDropdownClick}\n      >\n        {selectedOption}\n      </button>\n      {isOpen && (\n        <div className={styles.dropdown_content}>\n          {options.map((option, index) => (\n            <div\n              key={index}\n              className={styles.option}\n              onClick={() => handleOptionClick(option)}\n            >\n              {option}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Dropdown;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,aAAa,CAAC;EAEnE,MAAMU,OAAO,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChCJ,SAAS,CAAC,CAACD,MAAM,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED;EACA,MAAMM,iBAAiB,GAAIC,MAAM,IAAK;IACpCJ,iBAAiB,CAACI,MAAM,CAAC,CAAC,CAAC;IAC3BN,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;EACpB,CAAC;;EAED,oBACEJ,OAAA;IAAKW,SAAS,EAAEb,MAAM,CAACc,kBAAmB;IAAAC,QAAA,gBACxCb,OAAA;MACEW,SAAS,EAAG,GAAEb,MAAM,CAACgB,QAAS,IAAGX,MAAM,GAAGL,MAAM,CAACiB,MAAM,GAAG,EAAG,EAAE;MAC/DC,OAAO,EAAER,mBAAoB;MAAAK,QAAA,EAE5BR;IAAc;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,EACRjB,MAAM,iBACLH,OAAA;MAAKW,SAAS,EAAEb,MAAM,CAACuB,gBAAiB;MAAAR,QAAA,EACrCN,OAAO,CAACe,GAAG,CAAC,CAACZ,MAAM,EAAEa,KAAK,kBACzBvB,OAAA;QAEEW,SAAS,EAAEb,MAAM,CAACY,MAAO;QACzBM,OAAO,EAAEA,CAAA,KAAMP,iBAAiB,CAACC,MAAM,CAAE;QAAAG,QAAA,EAExCH;MAAM,GAJFa,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAClB,EAAA,CAzCQD,QAAQ;AAAAuB,EAAA,GAARvB,QAAQ;AA2CjB,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}